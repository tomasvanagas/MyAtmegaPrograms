;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0035 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0036 char status,data;
; 0000 0037 status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0038 data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0039 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 003A    {
; 0000 003B    rx_buffer[rx_wr_index]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 003C    if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 003D    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 003E       {
; 0000 003F       rx_counter=0;
;PCODE: $00000026 VOL: 0
; 0000 0040       rx_buffer_overflow=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0041       };
;PCODE: $0000002A VOL: 0
; 0000 0042    };
;PCODE: $0000002B VOL: 0
; 0000 0043 }
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 004A {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 004B char data;
; 0000 004C while (rx_counter==0);
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 004D data=rx_buffer[rx_rd_index];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 004E if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 004F #asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
; 0000 0050 --rx_counter;
;PCODE: $00000044 VOL: 0
; 0000 0051 #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0000 0052 return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0053 }
;PCODE: $0000004A VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE<256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0063 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0064 if (tx_counter)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0065    {
; 0000 0066    --tx_counter;
;PCODE: $0000004F VOL: 0
; 0000 0067    UDR=tx_buffer[tx_rd_index];
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0068    if (++tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0069    };
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 006A }
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 0071 {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0072 while (tx_counter == TX_BUFFER_SIZE);
;	c -> Y+0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0073 #asm("cli")
;PCODE: $00000067 VOL: 0
	cli
;PCODE: $00000068 VOL: 0
; 0000 0074 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0075    {
; 0000 0076    tx_buffer[tx_wr_index]=c;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0077    if (++tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0078    ++tx_counter;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0079    }
; 0000 007A else
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 007B    UDR=c;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 007C #asm("sei")
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
	sei
;PCODE: $00000082 VOL: 0
; 0000 007D }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;
;void main(void)
; 0000 0087 {
;PCODE: $00000086 VOL: 0
; 0000 0088 // Declare your local variables here
; 0000 0089 
; 0000 008A // Input/Output Ports initialization
; 0000 008B // Port A initialization
; 0000 008C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 008D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 008E PORTA=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 008F DDRA=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0090 
; 0000 0091 // Port B initialization
; 0000 0092 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0093 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0094 PORTB=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0095 DDRB=0xFF;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0096 
; 0000 0097 // Port C initialization
; 0000 0098 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0099 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 009A PORTC=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 009B DDRC=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 009C 
; 0000 009D // Port D initialization
; 0000 009E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 009F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00A0 PORTD=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00A1 DDRD=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00A2 
; 0000 00A3 // Timer/Counter 0 initialization
; 0000 00A4 // Clock source: System Clock
; 0000 00A5 // Clock value: Timer 0 Stopped
; 0000 00A6 // Mode: Normal top=FFh
; 0000 00A7 // OC0 output: Disconnected
; 0000 00A8 TCCR0=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00A9 TCNT0=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00AA OCR0=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00AB 
; 0000 00AC // Timer/Counter 1 initialization
; 0000 00AD // Clock source: System Clock
; 0000 00AE // Clock value: Timer1 Stopped
; 0000 00AF // Mode: Normal top=FFFFh
; 0000 00B0 // OC1A output: Discon.
; 0000 00B1 // OC1B output: Discon.
; 0000 00B2 // Noise Canceler: Off
; 0000 00B3 // Input Capture on Falling Edge
; 0000 00B4 // Timer1 Overflow Interrupt: Off
; 0000 00B5 // Input Capture Interrupt: Off
; 0000 00B6 // Compare A Match Interrupt: Off
; 0000 00B7 // Compare B Match Interrupt: Off
; 0000 00B8 TCCR1A=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00B9 TCCR1B=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00BA TCNT1H=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00BB TCNT1L=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00BC ICR1H=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00BD ICR1L=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00BE OCR1AH=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00BF OCR1AL=0x00;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00C0 OCR1BH=0x00;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00C1 OCR1BL=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00C2 
; 0000 00C3 // Timer/Counter 2 initialization
; 0000 00C4 // Clock source: System Clock
; 0000 00C5 // Clock value: Timer2 Stopped
; 0000 00C6 // Mode: Normal top=FFh
; 0000 00C7 // OC2 output: Disconnected
; 0000 00C8 ASSR=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00C9 TCCR2=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00CA TCNT2=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00CB OCR2=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00CC 
; 0000 00CD // External Interrupt(s) initialization
; 0000 00CE // INT0: Off
; 0000 00CF // INT1: Off
; 0000 00D0 // INT2: Off
; 0000 00D1 MCUCR=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00D2 MCUCSR=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00D3 
; 0000 00D4 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00D5 TIMSK=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00D6 
; 0000 00D7 // USART initialization
; 0000 00D8 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00D9 // USART Receiver: On
; 0000 00DA // USART Transmitter: On
; 0000 00DB // USART Mode: Asynchronous
; 0000 00DC // USART Baud Rate: 56000 (2x)
; 0000 00DD UCSRA=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00DE UCSRB=0xD8;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00DF UCSRC=0x86;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00E0 UBRRH=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00E1 UBRRL=0x11;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00E2 
; 0000 00E3 // Analog Comparator initialization
; 0000 00E4 // Analog Comparator: Off
; 0000 00E5 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00E6 ACSR=0x80;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00E7 SFIOR=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00E8 
; 0000 00E9 // Watchdog Timer initialization
; 0000 00EA // Watchdog Timer Prescaler: OSC/16k
; 0000 00EB #pragma optsize-
; 0000 00EC WDTCR=0x18;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00ED WDTCR=0x08;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00EE #ifdef _OPTIMIZE_SIZE_
; 0000 00EF #pragma optsize+
; 0000 00F0 #endif
; 0000 00F1 
; 0000 00F2 // Global enable interrupts
; 0000 00F3 #asm("sei")
;PCODE: $000000D1 VOL: 0
	sei
;PCODE: $000000D2 VOL: 0
; 0000 00F4 
; 0000 00F5     while (1){
;PCODE: $000000D3 VOL: 0
; 0000 00F6     ////////////////////////////////////////
; 0000 00F7         if(PINA.0==1){
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00F8         putchar('1');
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00F9         }
; 0000 00FA         else{
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00FB         putchar('0');
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00FC         }
;PCODE: $000000DF VOL: 0
; 0000 00FD 
; 0000 00FE         if(PINA.1==1){
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00FF         putchar('1');
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0100         }
; 0000 0101         else{
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 0102         putchar('0');
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0103         }
;PCODE: $000000EB VOL: 0
; 0000 0104 
; 0000 0105         if(PINA.2==1){
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0106         putchar('1');
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0107         }
; 0000 0108         else{
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 0109         putchar('0');
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 010A         }
;PCODE: $000000F7 VOL: 0
; 0000 010B 
; 0000 010C         if(PINA.3==1){
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 010D         putchar('1');
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 010E         }
; 0000 010F         else{
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 0110         putchar('0');
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0111         }
;PCODE: $00000103 VOL: 0
; 0000 0112 
; 0000 0113         if(PINA.4==1){
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0114         putchar('1');
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0115         }
; 0000 0116         else{
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0117         putchar('0');
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0118         }
;PCODE: $0000010F VOL: 0
; 0000 0119 
; 0000 011A         if(PINA.5==1){
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 011B         putchar('1');
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 011C         }
; 0000 011D         else{
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 011E         putchar('0');
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 011F         }
;PCODE: $0000011B VOL: 0
; 0000 0120 
; 0000 0121         if(PINA.6==1){
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0122         putchar('1');
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0123         }
; 0000 0124         else{
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0125         putchar('0');
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0126         }
;PCODE: $00000127 VOL: 0
; 0000 0127 
; 0000 0128         if(PINA.7==1){
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0129         putchar('1');
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 012A         }
; 0000 012B         else{
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 012C         putchar('0');
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 012D         }
;PCODE: $00000133 VOL: 0
; 0000 012E     ////////////////////////////////////////
; 0000 012F         if(rx_buffer[0]=='1'){
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 0130         PORTB.7 = 1;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0131         }
; 0000 0132         else{
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0133         PORTB.7 = 0;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0134         }
;PCODE: $0000013D VOL: 0
; 0000 0135 
; 0000 0136         if(rx_buffer[1]=='1'){
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0137         PORTB.6 = 1;
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0138         }
; 0000 0139         else{
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 013A         PORTB.6 = 0;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 013B         }
;PCODE: $00000148 VOL: 0
; 0000 013C 
; 0000 013D         if(rx_buffer[2]=='1'){
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 013E         PORTB.5 = 1;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 013F         }
; 0000 0140         else{
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 0141         PORTB.5 = 0;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 0142         }
;PCODE: $00000153 VOL: 0
; 0000 0143 
; 0000 0144         if(rx_buffer[3]=='1'){
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0145         PORTB.4 = 1;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 0146         }
; 0000 0147         else{
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0148         PORTB.4 = 0;
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0149         }
;PCODE: $0000015E VOL: 0
; 0000 014A 
; 0000 014B         if(rx_buffer[4]=='1'){
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 014C         PORTB.3 = 1;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 014D         }
; 0000 014E         else{
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 014F         PORTB.3 = 0;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 0150         }
;PCODE: $00000169 VOL: 0
; 0000 0151 
; 0000 0152         if(rx_buffer[5]=='1'){
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 0153         PORTB.2 = 1;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0154         }
; 0000 0155         else{
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 0156         PORTB.2 = 0;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 0157         }
;PCODE: $00000174 VOL: 0
; 0000 0158 
; 0000 0159         if(rx_buffer[6]=='1'){
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 015A         PORTB.1 = 1;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 015B         }
; 0000 015C         else{
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 015D         PORTB.1 = 0;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 015E         }
;PCODE: $0000017F VOL: 0
; 0000 015F 
; 0000 0160         if(rx_buffer[7]=='1'){
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 0161         PORTB.0 = 1;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0162         }
; 0000 0163         else{
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0164         PORTB.0 = 0;
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0165         }
;PCODE: $0000018A VOL: 0
; 0000 0166     // Rx
; 0000 0167     //rx_wr_index = 7;
; 0000 0168     //rx_rd_index = 7;
; 0000 0169     //rx_counter = 7;
; 0000 016A 
; 0000 016B     // Tx
; 0000 016C     //tx_wr_index = 0;
; 0000 016D     //tx_rd_index = 0;
; 0000 016E     //tx_counter = 0;
; 0000 016F 
; 0000 0170     delay_ms(1);
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 0171     ////////////////////////////////////////
; 0000 0172 
; 0000 0173     }
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 0174 }
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
