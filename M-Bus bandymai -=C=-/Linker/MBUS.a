;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.04.4a Advanced
;Automatic Program Generator
;© Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 8/11/2011
;Author  : NeVaDa
;Company : Home
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Declare your global variables here
;
;
;char query(char Data){
; 0000 001E char query(char Data){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001F char DataToSend[8];
; 0000 0020 char i;
; 0000 0021 ///////////////// Split /////////////////////
; 0000 0022     if(1){
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	Data -> Y+9
;	DataToSend -> Y+1
;	i -> R17
; 0000 0023     char a = Data;
; 0000 0024     char div = 256;
; 0000 0025 
; 0000 0026         for(i=7;i>=0;i--){
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;	Data -> Y+11
;	DataToSend -> Y+3
;	a -> Y+1
;	div -> Y+0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0027         div = div / 2;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0028 
; 0000 0029             if(a>=div){
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 002A             DataToSend[i] = 1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 002B             a = a - div;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 002C             }
; 0000 002D             else{
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 002E             DataToSend[i] = 0;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 002F             }
;PCODE: $0000003C VOL: 0
; 0000 0030 
; 0000 0031         }
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0032     }
;PCODE: $00000042 VOL: 0
; 0000 0033 /////////////////////////////////////////////
; 0000 0034 
; 0000 0035 
; 0000 0036 
; 0000 0037 ///////////////// Send //////////////////////
; 0000 0038     if(1){
;PCODE: $00000043 VOL: 0
; 0000 0039         // start
; 0000 003A 
; 0000 003B     delay_ms(3);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 003C 
; 0000 003D 
; 0000 003E         ///////
; 0000 003F         // data
; 0000 0040         for(i=0;i<8;i++){
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0041             if(DataToSend[0]==1){
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0042 
; 0000 0043             }
; 0000 0044             else{
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0045 
; 0000 0046             }
;PCODE: $00000055 VOL: 0
; 0000 0047         delay_ms(3);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0048         }
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0049 
; 0000 004A         ///////
; 0000 004B         // stop
; 0000 004C 
; 0000 004D     delay_ms(1);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 004E 
; 0000 004F 
; 0000 0050         ///////
; 0000 0051     }
; 0000 0052 /////////////////////////////////////////////
; 0000 0053 
; 0000 0054 
; 0000 0055 
; 0000 0056 //////////////// Receive ////////////////////
; 0000 0057     if(1){
;PCODE: $00000061 VOL: 0
; 0000 0058 
; 0000 0059 
; 0000 005A 
; 0000 005B 
; 0000 005C 
; 0000 005D 
; 0000 005E     }
; 0000 005F return 0;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0060 /////////////////////////////////////////////
; 0000 0061 }
;PCODE: $00000068 VOL: 0
;
;
;
;
;void main(void)
; 0000 0067 {
;PCODE: $00000069 VOL: 0
; 0000 0068 // Declare your local variables here
; 0000 0069 
; 0000 006A // Input/Output Ports initialization
; 0000 006B // Port A initialization
; 0000 006C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 006D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 006E PORTA=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 006F DDRA=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0070 
; 0000 0071 // Port B initialization
; 0000 0072 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0073 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0074 PORTB=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0075 DDRB=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0076 
; 0000 0077 // Port C initialization
; 0000 0078 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0079 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 007A PORTC=0x00;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 007B DDRC=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 007C 
; 0000 007D // Port D initialization
; 0000 007E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 007F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0080 PORTD=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0081 DDRD=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0082 
; 0000 0083 // Timer/Counter 0 initialization
; 0000 0084 // Clock source: System Clock
; 0000 0085 // Clock value: Timer 0 Stopped
; 0000 0086 // Mode: Normal top=FFh
; 0000 0087 // OC0 output: Disconnected
; 0000 0088 TCCR0=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0089 TCNT0=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 008A OCR0=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 008B 
; 0000 008C // Timer/Counter 1 initialization
; 0000 008D // Clock source: System Clock
; 0000 008E // Clock value: Timer1 Stopped
; 0000 008F // Mode: Normal top=FFFFh
; 0000 0090 // OC1A output: Discon.
; 0000 0091 // OC1B output: Discon.
; 0000 0092 // Noise Canceler: Off
; 0000 0093 // Input Capture on Falling Edge
; 0000 0094 // Timer1 Overflow Interrupt: Off
; 0000 0095 // Input Capture Interrupt: Off
; 0000 0096 // Compare A Match Interrupt: Off
; 0000 0097 // Compare B Match Interrupt: Off
; 0000 0098 TCCR1A=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0099 TCCR1B=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 009A TCNT1H=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 009B TCNT1L=0x00;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 009C ICR1H=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 009D ICR1L=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 009E OCR1AH=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 009F OCR1AL=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00A0 OCR1BH=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00A1 OCR1BL=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00A2 
; 0000 00A3 // Timer/Counter 2 initialization
; 0000 00A4 // Clock source: System Clock
; 0000 00A5 // Clock value: Timer2 Stopped
; 0000 00A6 // Mode: Normal top=FFh
; 0000 00A7 // OC2 output: Disconnected
; 0000 00A8 ASSR=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00A9 TCCR2=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00AA TCNT2=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00AB OCR2=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00AC 
; 0000 00AD // External Interrupt(s) initialization
; 0000 00AE // INT0: Off
; 0000 00AF // INT1: Off
; 0000 00B0 // INT2: Off
; 0000 00B1 MCUCR=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00B2 MCUCSR=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00B3 
; 0000 00B4 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00B5 TIMSK=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00B6 
; 0000 00B7 // Analog Comparator initialization
; 0000 00B8 // Analog Comparator: Off
; 0000 00B9 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00BA ACSR=0x80;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00BB SFIOR=0x00;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00BC 
; 0000 00BD while (1)
;PCODE: $000000A6 VOL: 0
; 0000 00BE       {
; 0000 00BF       // Place your code here
; 0000 00C0 
; 0000 00C1       };
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00C2 }
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
