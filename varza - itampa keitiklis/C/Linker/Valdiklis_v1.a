;/*****************************************************
;Project : Saules kolektoriaus valdiklis
;Version : v1.0
;Date    : 2011-08-20
;Author  : T.V.
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;*****************************************************/
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;
;
;
;// Alphanumeric LCD Module functions portc
;#include <lcd.h>
;#asm
;PCODE: $0000000D VOL: 0
   .equ __lcd_port=0x15
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0015 #endasm
;
;
;char NumToIndex(char Num){
; 0000 0018 char NumToIndex(char Num){

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0019     if(Num==0){     return '0';}
;	Num -> Y+0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 001A     else if(Num==1){return '1';}
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 001B     else if(Num==2){return '2';}
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 001C     else if(Num==3){return '3';}
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 001D     else if(Num==4){return '4';}
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 001E     else if(Num==5){return '5';}
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 001F     else if(Num==6){return '6';}
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0020     else if(Num==7){return '7';}
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0021     else if(Num==8){return '8';}
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0022     else if(Num==9){return '9';}
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0023     else{           return '-';}
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0024 return 0;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0025 }
;PCODE: $00000068 VOL: 0
;
;char lcd_put_number(char Type, char Lenght, char IsSign,
; 0000 0028 
; 0000 0029                     char NumbersAfterDot,
; 0000 002A 
; 0000 002B                     unsigned long int Number0,
; 0000 002C                     signed long int Number1){
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 002D     if(Lenght>0){
;	Type -> Y+11
;	Lenght -> Y+10
;	IsSign -> Y+9
;	NumbersAfterDot -> Y+8
;	Number0 -> Y+4
;	Number1 -> Y+0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 002E     unsigned long int k = 1;
; 0000 002F     unsigned char i;
; 0000 0030         for(i=0;i<Lenght-1;i++) k = k*10;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;	Type -> Y+16
;	Lenght -> Y+15
;	IsSign -> Y+14
;	NumbersAfterDot -> Y+13
;	Number0 -> Y+9
;	Number1 -> Y+5
;	k -> Y+1
;	i -> Y+0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0032 if(Type==0){
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0033         unsigned long int a;
; 0000 0034         unsigned char b;
; 0000 0035         a = Number0;
;PCODE: $00000092 VOL: 0
;	Type -> Y+21
;	Lenght -> Y+20
;	IsSign -> Y+19
;	NumbersAfterDot -> Y+18
;	Number0 -> Y+14
;	Number1 -> Y+10
;	k -> Y+6
;	i -> Y+5
;	a -> Y+1
;	b -> Y+0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0036 
; 0000 0037             if(IsSign==1){
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0038             lcd_putchar('+');
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0039             }
; 0000 003A 
; 0000 003B             if(a<0){
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 003C             a = a*(-1);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 003D             }
; 0000 003E 
; 0000 003F             if(k*10<a){
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0040             a = k*10 - 1;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0041             }
; 0000 0042 
; 0000 0043             for(i=0;i<Lenght;i++){
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0044                 if(NumbersAfterDot!=0){
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0045                     if(Lenght-NumbersAfterDot==i){
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0046                     lcd_putchar('.');
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0047                     }
; 0000 0048                 }
;PCODE: $000000CA VOL: 0
; 0000 0049             b = a/k;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 004A             lcd_putchar( NumToIndex( b ) );
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 004B             a = a - b*k;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 004C             k = k/10;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 004D             }
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 004E         return 1;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 004F         }
;PCODE: $000000EB VOL: 0
; 0000 0050 
; 0000 0051         else if(Type==1){
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0052         signed long int a;
; 0000 0053         unsigned char b;
; 0000 0054         a = Number1;
;PCODE: $000000F0 VOL: 0
;	Type -> Y+21
;	Lenght -> Y+20
;	IsSign -> Y+19
;	NumbersAfterDot -> Y+18
;	Number0 -> Y+14
;	Number1 -> Y+10
;	k -> Y+6
;	i -> Y+5
;	a -> Y+1
;	b -> Y+0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0055 
; 0000 0056             if(IsSign==1){
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0057                 if(a>=0){
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0058                 lcd_putchar('+');
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 0059                 }
; 0000 005A                 else{
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 005B                 lcd_putchar('-');
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 005C                 }
;PCODE: $00000101 VOL: 0
; 0000 005D             }
; 0000 005E 
; 0000 005F             if(a<0){
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0060             a = a*(-1);
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0061             }
; 0000 0062 
; 0000 0063             if(k*10<a){
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0064             a = k*10 - 1;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0065             }
; 0000 0066 
; 0000 0067             for(i=0;i<Lenght;i++){
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0068                 if(NumbersAfterDot!=0){
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0069                     if(Lenght-NumbersAfterDot==i){
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 006A                     lcd_putchar('.');
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 006B                     }
; 0000 006C                 }
;PCODE: $00000132 VOL: 0
; 0000 006D             b = a/k;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 006E             lcd_putchar( NumToIndex( b ) );
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 006F             a = a - b*k;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0070             k = k/10;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0071             }
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0072         return 1;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 0073         }
;PCODE: $00000153 VOL: 0
; 0000 0074     }
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0075 return 0;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0076 }
;PCODE: $0000015B VOL: 0
;
;
;
;#define TEMPERATURE_BOIL PORTA.1
;#define TEMPERATURE_S_INP PORTA.2
;#define TEMPERATURE_S_OUT PORTA.3
;
;
;
;
;
;
;
;
;
;#define ADC_VREF_TYPE 0x00
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 008A {
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 008B ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 008C // Delay needed for the stabilization of the ADC input voltage
; 0000 008D delay_us(10);
;PCODE: $00000161 VOL: 0
; 0000 008E // Start the AD conversion
; 0000 008F ADCSRA|=0x40;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 0090 // Wait for the AD conversion to complete
; 0000 0091 while ((ADCSRA & 0x10)==0);
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0092 ADCSRA|=0x10;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 0093 return ADCW;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0094 }
;PCODE: $0000016F VOL: 0
;
;
;
;
;void main(void){
; 0000 0099 void main(void){
;PCODE: $00000170 VOL: 0
; 0000 009A // Input/Output Ports initialization
; 0000 009B // Port A initialization
; 0000 009C // Func7=Out Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=In
; 0000 009D // State7=T State6=T State5=T State4=T State3=T State2=T State1=0 State0=0
; 0000 009E PORTA=0x00;
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 009F DDRA=0b00000000;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00A0 
; 0000 00A1 // Port B initialization
; 0000 00A2 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=Out
; 0000 00A3 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00A4 PORTB=0x00;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00A5 DDRB=0b00000011;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00A6 
; 0000 00A7 // Port C initialization
; 0000 00A8 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00A9 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00AA PORTC=0x00;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00AB DDRC=0b00000000;
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 00AC 
; 0000 00AD // Port D initialization
; 0000 00AE // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00AF // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00B0 PORTD=0x00;
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00B1 DDRD=0b00000000;
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00B2 
; 0000 00B3 // Timer/Counter 0 initialization
; 0000 00B4 // Clock source: System Clock
; 0000 00B5 // Clock value: Timer 0 Stopped
; 0000 00B6 // Mode: Normal top=FFh
; 0000 00B7 // OC0 output: Disconnected
; 0000 00B8 TCCR0=0x00;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00B9 TCNT0=0x00;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 00BA OCR0=0x00;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 00BB 
; 0000 00BC // Timer/Counter 1 initialization
; 0000 00BD // Clock source: System Clock
; 0000 00BE // Clock value: Timer1 Stopped
; 0000 00BF // Mode: Normal top=FFFFh
; 0000 00C0 // OC1A output: Discon.
; 0000 00C1 // OC1B output: Discon.
; 0000 00C2 // Noise Canceler: Off
; 0000 00C3 // Input Capture on Falling Edge
; 0000 00C4 // Timer1 Overflow Interrupt: Off
; 0000 00C5 // Input Capture Interrupt: Off
; 0000 00C6 // Compare A Match Interrupt: Off
; 0000 00C7 // Compare B Match Interrupt: Off
; 0000 00C8 TCCR1A=0x00;
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 00C9 TCCR1B=0x00;
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 00CA TCNT1H=0x00;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 00CB TCNT1L=0x00;
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 00CC ICR1H=0x00;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 00CD ICR1L=0x00;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 00CE OCR1AH=0x00;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0000 00CF OCR1AL=0x00;
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 00D0 OCR1BH=0x00;
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 00D1 OCR1BL=0x00;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 00D2 
; 0000 00D3 // Timer/Counter 2 initialization
; 0000 00D4 // Clock source: System Clock
; 0000 00D5 // Clock value: Timer2 Stopped
; 0000 00D6 // Mode: Normal top=FFh
; 0000 00D7 // OC2 output: Disconnected
; 0000 00D8 ASSR=0x00;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 00D9 TCCR2=0x00;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 00DA TCNT2=0x00;
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 00DB OCR2=0x00;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 00DC 
; 0000 00DD // External Interrupt(s) initialization
; 0000 00DE // INT0: Off
; 0000 00DF // INT1: Off
; 0000 00E0 // INT2: Off
; 0000 00E1 MCUCR=0x00;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 00E2 MCUCSR=0x00;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 00E3 
; 0000 00E4 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00E5 TIMSK=0x00;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 00E6 
; 0000 00E7 // Analog Comparator initialization
; 0000 00E8 // Analog Comparator: Off
; 0000 00E9 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00EA ACSR=0x80;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 00EB SFIOR=0x00;
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 00EC 
; 0000 00ED // ADC initialization
; 0000 00EE // ADC Clock frequency: 1000.000 kHz
; 0000 00EF // ADC Voltage Reference: AREF pin
; 0000 00F0 // Only the 8 most significant bits of
; 0000 00F1 // the AD conversion result are used
; 0000 00F2 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 00F3 ADCSRA=0x83;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 00F4 
; 0000 00F5 // LCD module initialization
; 0000 00F6 lcd_init(20);
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 00F7 
; 0000 00F8 // Global enable interrupts
; 0000 00F9 #asm("sei")
;PCODE: $000001B4 VOL: 0
	sei
;PCODE: $000001B5 VOL: 0
; 0000 00FA 
; 0000 00FB 
; 0000 00FC 
; 0000 00FD 
; 0000 00FE     while(1){
;PCODE: $000001B6 VOL: 0
; 0000 00FF     unsigned int a;
; 0000 0100     a = read_adc(0);
;PCODE: $000001B7 VOL: 0
;	a -> Y+0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0101     lcd_clear();
;PCODE: $000001BC VOL: 0
; 0000 0102     lcd_put_number(1,4,0,0,0,a);
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 0103     lcd_putsf(" bit");
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 0104     delay_ms(1000);
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 0105     }
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0106 }
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
