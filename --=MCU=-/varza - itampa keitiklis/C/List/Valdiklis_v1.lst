
AVRASM ver. 2.1.30  C:\Users\TomasVanagas\Desktop\-=CPU=-\varza - itampa keitiklis\C\List\Valdiklis_v1.asm Mon May 05 03:27:43 2014

C:\Users\TomasVanagas\Desktop\-=CPU=-\varza - itampa keitiklis\C\List\Valdiklis_v1.asm(1051): warning: Register r5 already defined by the .DEF directive
C:\Users\TomasVanagas\Desktop\-=CPU=-\varza - itampa keitiklis\C\List\Valdiklis_v1.asm(1052): warning: Register r4 already defined by the .DEF directive
C:\Users\TomasVanagas\Desktop\-=CPU=-\varza - itampa keitiklis\C\List\Valdiklis_v1.asm(1053): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.04.4a Advanced
                 ;(C) Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega32
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Speed
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : long, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;INTERRUPT VECTORS
000000 940c 0032 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x0:
00002a 6220
00002b 7469
C:\Users\TomasVanagas\Desktop\-=CPU=-\varza - itampa keitiklis\C\List\Valdiklis_v1.asm(1082): warning: .cseg .db misalignment - padding zero byte
00002c 0000      	.DB  0x20,0x62,0x69,0x74,0x0
                 _0x2000003:
00002d c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00002e 0002      	.DW  0x02
00002f 0260      	.DW  __base_y_G100
000030 005a      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000031 0000      	.DW  0
                 
                 __RESET:
000032 94f8      	CLI
000033 27ee      	CLR  R30
000034 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000035 e0f1      	LDI  R31,1
000036 bffb      	OUT  GICR,R31
000037 bfeb      	OUT  GICR,R30
000038 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000039 e1f8      	LDI  R31,0x18
00003a bdf1      	OUT  WDTCR,R31
00003b bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00003c e08d      	LDI  R24,(14-2)+1
00003d e0a2      	LDI  R26,2
00003e 27bb      	CLR  R27
                 __CLEAR_REG:
00003f 93ed      	ST   X+,R30
000040 958a      	DEC  R24
000041 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000042 e080      	LDI  R24,LOW(0x800)
000043 e098      	LDI  R25,HIGH(0x800)
000044 e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
000045 93ed      	ST   X+,R30
000046 9701      	SBIW R24,1
000047 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000048 e5ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000049 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004a 9185      	LPM  R24,Z+
00004b 9195      	LPM  R25,Z+
00004c 9700      	SBIW R24,0
00004d f061      	BREQ __GLOBAL_INI_END
00004e 91a5      	LPM  R26,Z+
00004f 91b5      	LPM  R27,Z+
000050 9005      	LPM  R0,Z+
000051 9015      	LPM  R1,Z+
000052 01bf      	MOVW R22,R30
000053 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000054 9005      	LPM  R0,Z+
000055 920d      	ST   X+,R0
000056 9701      	SBIW R24,1
000057 f7e1      	BRNE __GLOBAL_INI_LOOP
000058 01fb      	MOVW R30,R22
000059 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;STACK POINTER INITIALIZATION
00005a e5ef      	LDI  R30,LOW(0x85F)
00005b bfed      	OUT  SPL,R30
00005c e0e8      	LDI  R30,HIGH(0x85F)
00005d bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005e e6c0      	LDI  R28,LOW(0x260)
00005f e0d2      	LDI  R29,HIGH(0x260)
                 
000060 940c 020b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Project : Saules kolektoriaus valdiklis
                 ;Version : v1.0
                 ;Date    : 2011-08-20
                 ;Author  : T.V.
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;*****************************************************/
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;
                 ;
                 ;
                 ;// Alphanumeric LCD Module functions portc
                 ;#include <lcd.h>
                 ;#asm
                    .equ __lcd_port=0x15
                 ; 0000 0015 #endasm
                 ;
                 ;
                 ;char NumToIndex(char Num){
                 ; 0000 0018 char NumToIndex(char Num){
                 
                 	.CSEG
                 _NumToIndex:
                 ; 0000 0019     if(Num==0){     return '0';}
                 ;	Num -> Y+0
000062 81e8      	LD   R30,Y
000063 30e0      	CPI  R30,0
000064 f419      	BRNE _0x3
000065 e3e0      	LDI  R30,LOW(48)
000066 940c 033e 	JMP  _0x2020001
                 ; 0000 001A     else if(Num==1){return '1';}
                 _0x3:
000068 81a8      	LD   R26,Y
000069 30a1      	CPI  R26,LOW(0x1)
00006a f419      	BRNE _0x5
00006b e3e1      	LDI  R30,LOW(49)
00006c 940c 033e 	JMP  _0x2020001
                 ; 0000 001B     else if(Num==2){return '2';}
                 _0x5:
00006e 81a8      	LD   R26,Y
00006f 30a2      	CPI  R26,LOW(0x2)
000070 f419      	BRNE _0x7
000071 e3e2      	LDI  R30,LOW(50)
000072 940c 033e 	JMP  _0x2020001
                 ; 0000 001C     else if(Num==3){return '3';}
                 _0x7:
000074 81a8      	LD   R26,Y
000075 30a3      	CPI  R26,LOW(0x3)
000076 f419      	BRNE _0x9
000077 e3e3      	LDI  R30,LOW(51)
000078 940c 033e 	JMP  _0x2020001
                 ; 0000 001D     else if(Num==4){return '4';}
                 _0x9:
00007a 81a8      	LD   R26,Y
00007b 30a4      	CPI  R26,LOW(0x4)
00007c f419      	BRNE _0xB
00007d e3e4      	LDI  R30,LOW(52)
00007e 940c 033e 	JMP  _0x2020001
                 ; 0000 001E     else if(Num==5){return '5';}
                 _0xB:
000080 81a8      	LD   R26,Y
000081 30a5      	CPI  R26,LOW(0x5)
000082 f419      	BRNE _0xD
000083 e3e5      	LDI  R30,LOW(53)
000084 940c 033e 	JMP  _0x2020001
                 ; 0000 001F     else if(Num==6){return '6';}
                 _0xD:
000086 81a8      	LD   R26,Y
000087 30a6      	CPI  R26,LOW(0x6)
000088 f419      	BRNE _0xF
000089 e3e6      	LDI  R30,LOW(54)
00008a 940c 033e 	JMP  _0x2020001
                 ; 0000 0020     else if(Num==7){return '7';}
                 _0xF:
00008c 81a8      	LD   R26,Y
00008d 30a7      	CPI  R26,LOW(0x7)
00008e f419      	BRNE _0x11
00008f e3e7      	LDI  R30,LOW(55)
000090 940c 033e 	JMP  _0x2020001
                 ; 0000 0021     else if(Num==8){return '8';}
                 _0x11:
000092 81a8      	LD   R26,Y
000093 30a8      	CPI  R26,LOW(0x8)
000094 f419      	BRNE _0x13
000095 e3e8      	LDI  R30,LOW(56)
000096 940c 033e 	JMP  _0x2020001
                 ; 0000 0022     else if(Num==9){return '9';}
                 _0x13:
000098 81a8      	LD   R26,Y
000099 30a9      	CPI  R26,LOW(0x9)
00009a f419      	BRNE _0x15
00009b e3e9      	LDI  R30,LOW(57)
00009c 940c 033e 	JMP  _0x2020001
                 ; 0000 0023     else{           return '-';}
                 _0x15:
00009e e2ed      	LDI  R30,LOW(45)
00009f 940c 033e 	JMP  _0x2020001
                 ; 0000 0024 return 0;
                 ; 0000 0025 }
                 ;
                 ;char lcd_put_number(char Type, char Lenght, char IsSign,
                 ; 0000 0028 
                 ; 0000 0029                     char NumbersAfterDot,
                 ; 0000 002A 
                 ; 0000 002B                     unsigned long int Number0,
                 ; 0000 002C                     signed long int Number1){
                 _lcd_put_number:
                 ; 0000 002D     if(Lenght>0){
                 ;	Type -> Y+11
                 ;	Lenght -> Y+10
                 ;	IsSign -> Y+9
                 ;	NumbersAfterDot -> Y+8
                 ;	Number0 -> Y+4
                 ;	Number1 -> Y+0
0000a1 85aa      	LDD  R26,Y+10
0000a2 30a1      	CPI  R26,LOW(0x1)
0000a3 f410      	BRSH PC+3
0000a4 940c 01fb 	JMP _0x17
                 ; 0000 002E     unsigned long int k = 1;
                 ; 0000 002F     unsigned char i;
                 ; 0000 0030         for(i=0;i<Lenght-1;i++) k = k*10;
0000a6 9725      	SBIW R28,5
0000a7 e0e1      	LDI  R30,LOW(1)
0000a8 83e9      	STD  Y+1,R30
0000a9 e0e0      	LDI  R30,LOW(0)
0000aa 83ea      	STD  Y+2,R30
0000ab 83eb      	STD  Y+3,R30
0000ac 83ec      	STD  Y+4,R30
                 ;	Type -> Y+16
                 ;	Lenght -> Y+15
                 ;	IsSign -> Y+14
                 ;	NumbersAfterDot -> Y+13
                 ;	Number0 -> Y+9
                 ;	Number1 -> Y+5
                 ;	k -> Y+1
                 ;	i -> Y+0
0000ad 83e8      	ST   Y,R30
                 _0x19:
0000ae 85ef      	LDD  R30,Y+15
0000af e0f0      	LDI  R31,0
0000b0 9731      	SBIW R30,1
0000b1 81a8      	LD   R26,Y
0000b2 e0b0      	LDI  R27,0
0000b3 17ae      	CP   R26,R30
0000b4 07bf      	CPC  R27,R31
0000b5 f494      	BRGE _0x1A
                +
0000b6 81e9     +LDD R30 , Y + 1
0000b7 81fa     +LDD R31 , Y + 1 + 1
0000b8 816b     +LDD R22 , Y + 1 + 2
0000b9 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
                +
0000ba e0aa     +LDI R26 , LOW ( 0xA )
0000bb e0b0     +LDI R27 , HIGH ( 0xA )
0000bc e080     +LDI R24 , BYTE3 ( 0xA )
0000bd e090     +LDI R25 , BYTE4 ( 0xA )
                 	__GETD2N 0xA
0000be 940e 035e 	CALL __MULD12U
                +
0000c0 83e9     +STD Y + 1 , R30
0000c1 83fa     +STD Y + 1 + 1 , R31
0000c2 836b     +STD Y + 1 + 2 , R22
0000c3 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
0000c4 81e8      	LD   R30,Y
0000c5 5fef      	SUBI R30,-LOW(1)
0000c6 83e8      	ST   Y,R30
0000c7 cfe6      	RJMP _0x19
                 _0x1A:
                 ; 0000 0032 if(Type==0){
0000c8 89e8      	LDD  R30,Y+16
0000c9 30e0      	CPI  R30,0
0000ca f011      	BREQ PC+3
0000cb 940c 0158 	JMP _0x1B
                 ; 0000 0033         unsigned long int a;
                 ; 0000 0034         unsigned char b;
                 ; 0000 0035         a = Number0;
0000cd 9725      	SBIW R28,5
                 ;	Type -> Y+21
                 ;	Lenght -> Y+20
                 ;	IsSign -> Y+19
                 ;	NumbersAfterDot -> Y+18
                 ;	Number0 -> Y+14
                 ;	Number1 -> Y+10
                 ;	k -> Y+6
                 ;	i -> Y+5
                 ;	a -> Y+1
                 ;	b -> Y+0
                +
0000ce 85ee     +LDD R30 , Y + 14
0000cf 85ff     +LDD R31 , Y + 14 + 1
0000d0 8968     +LDD R22 , Y + 14 + 2
0000d1 8979     +LDD R23 , Y + 14 + 3
                 	__GETD1S 14
                +
0000d2 83e9     +STD Y + 1 , R30
0000d3 83fa     +STD Y + 1 + 1 , R31
0000d4 836b     +STD Y + 1 + 2 , R22
0000d5 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0000 0036 
                 ; 0000 0037             if(IsSign==1){
0000d6 89ab      	LDD  R26,Y+19
0000d7 30a1      	CPI  R26,LOW(0x1)
0000d8 f421      	BRNE _0x1C
                 ; 0000 0038             lcd_putchar('+');
0000d9 e2eb      	LDI  R30,LOW(43)
0000da 93ea      	ST   -Y,R30
0000db 940e 02c6 	CALL _lcd_putchar
                 ; 0000 0039             }
                 ; 0000 003A 
                 ; 0000 003B             if(a<0){
                 _0x1C:
                +
0000dd 81a9     +LDD R26 , Y + 1
0000de 81ba     +LDD R27 , Y + 1 + 1
0000df 818b     +LDD R24 , Y + 1 + 2
0000e0 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
                 ; 0000 003C             a = a*(-1);
                 ; 0000 003D             }
                 ; 0000 003E 
                 ; 0000 003F             if(k*10<a){
                +
0000e1 81ee     +LDD R30 , Y + 6
0000e2 81ff     +LDD R31 , Y + 6 + 1
0000e3 8568     +LDD R22 , Y + 6 + 2
0000e4 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
0000e5 e0aa     +LDI R26 , LOW ( 0xA )
0000e6 e0b0     +LDI R27 , HIGH ( 0xA )
0000e7 e080     +LDI R24 , BYTE3 ( 0xA )
0000e8 e090     +LDI R25 , BYTE4 ( 0xA )
                 	__GETD2N 0xA
0000e9 940e 035e 	CALL __MULD12U
0000eb 01df      	MOVW R26,R30
0000ec 01cb      	MOVW R24,R22
                +
0000ed 81e9     +LDD R30 , Y + 1
0000ee 81fa     +LDD R31 , Y + 1 + 1
0000ef 816b     +LDD R22 , Y + 1 + 2
0000f0 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
0000f1 940e 03c0 	CALL __CPD21
0000f3 f490      	BRSH _0x1E
                 ; 0000 0040             a = k*10 - 1;
                +
0000f4 81ee     +LDD R30 , Y + 6
0000f5 81ff     +LDD R31 , Y + 6 + 1
0000f6 8568     +LDD R22 , Y + 6 + 2
0000f7 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
0000f8 e0aa     +LDI R26 , LOW ( 0xA )
0000f9 e0b0     +LDI R27 , HIGH ( 0xA )
0000fa e080     +LDI R24 , BYTE3 ( 0xA )
0000fb e090     +LDI R25 , BYTE4 ( 0xA )
                 	__GETD2N 0xA
0000fc 940e 035e 	CALL __MULD12U
                +
0000fe 50e1     +SUBI R30 , LOW ( 1 )
0000ff 40f0     +SBCI R31 , HIGH ( 1 )
000100 4060     +SBCI R22 , BYTE3 ( 1 )
000101 4070     +SBCI R23 , BYTE4 ( 1 )
                 	__SUBD1N 1
                +
000102 83e9     +STD Y + 1 , R30
000103 83fa     +STD Y + 1 + 1 , R31
000104 836b     +STD Y + 1 + 2 , R22
000105 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0000 0041             }
                 ; 0000 0042 
                 ; 0000 0043             for(i=0;i<Lenght;i++){
                 _0x1E:
000106 e0e0      	LDI  R30,LOW(0)
000107 83ed      	STD  Y+5,R30
                 _0x20:
000108 89ec      	LDD  R30,Y+20
000109 81ad      	LDD  R26,Y+5
00010a 17ae      	CP   R26,R30
00010b f010      	BRLO PC+3
00010c 940c 0155 	JMP _0x21
                 ; 0000 0044                 if(NumbersAfterDot!=0){
00010e 89ea      	LDD  R30,Y+18
00010f 30e0      	CPI  R30,0
000110 f071      	BREQ _0x22
                 ; 0000 0045                     if(Lenght-NumbersAfterDot==i){
000111 89ac      	LDD  R26,Y+20
000112 27bb      	CLR  R27
000113 e0f0      	LDI  R31,0
000114 1bae      	SUB  R26,R30
000115 0bbf      	SBC  R27,R31
000116 81ed      	LDD  R30,Y+5
000117 e0f0      	LDI  R31,0
000118 17ea      	CP   R30,R26
000119 07fb      	CPC  R31,R27
00011a f421      	BRNE _0x23
                 ; 0000 0046                     lcd_putchar('.');
00011b e2ee      	LDI  R30,LOW(46)
00011c 93ea      	ST   -Y,R30
00011d 940e 02c6 	CALL _lcd_putchar
                 ; 0000 0047                     }
                 ; 0000 0048                 }
                 _0x23:
                 ; 0000 0049             b = a/k;
                 _0x22:
                +
00011f 81ee     +LDD R30 , Y + 6
000120 81ff     +LDD R31 , Y + 6 + 1
000121 8568     +LDD R22 , Y + 6 + 2
000122 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
000123 81a9     +LDD R26 , Y + 1
000124 81ba     +LDD R27 , Y + 1 + 1
000125 818b     +LDD R24 , Y + 1 + 2
000126 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
000127 940e 0383 	CALL __DIVD21U
000129 83e8      	ST   Y,R30
                 ; 0000 004A             lcd_putchar( NumToIndex( b ) );
00012a 93ea      	ST   -Y,R30
00012b df36      	RCALL _NumToIndex
00012c 93ea      	ST   -Y,R30
00012d 940e 02c6 	CALL _lcd_putchar
                 ; 0000 004B             a = a - b*k;
00012f 81a8      	LD   R26,Y
000130 27bb      	CLR  R27
                +
000131 81ee     +LDD R30 , Y + 6
000132 81ff     +LDD R31 , Y + 6 + 1
000133 8568     +LDD R22 , Y + 6 + 2
000134 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
000135 940e 0359 	CALL __CWD2
000137 940e 035e 	CALL __MULD12U
                +
000139 81a9     +LDD R26 , Y + 1
00013a 81ba     +LDD R27 , Y + 1 + 1
00013b 818b     +LDD R24 , Y + 1 + 2
00013c 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
00013d 940e 034c 	CALL __SUBD21
                +
00013f 83a9     +STD Y + 1 , R26
000140 83ba     +STD Y + 1 + 1 , R27
000141 838b     +STD Y + 1 + 2 , R24
000142 839c     +STD Y + 1 + 3 , R25
                 	__PUTD2S 1
                 ; 0000 004C             k = k/10;
                +
000143 81ae     +LDD R26 , Y + 6
000144 81bf     +LDD R27 , Y + 6 + 1
000145 8588     +LDD R24 , Y + 6 + 2
000146 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
                +
000147 e0ea     +LDI R30 , LOW ( 0xA )
000148 e0f0     +LDI R31 , HIGH ( 0xA )
000149 e060     +LDI R22 , BYTE3 ( 0xA )
00014a e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
00014b 940e 0383 	CALL __DIVD21U
                +
00014d 83ee     +STD Y + 6 , R30
00014e 83ff     +STD Y + 6 + 1 , R31
00014f 8768     +STD Y + 6 + 2 , R22
000150 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
                 ; 0000 004D             }
000151 81ed      	LDD  R30,Y+5
000152 5fef      	SUBI R30,-LOW(1)
000153 83ed      	STD  Y+5,R30
000154 cfb3      	RJMP _0x20
                 _0x21:
                 ; 0000 004E         return 1;
000155 e0e1      	LDI  R30,LOW(1)
000156 962a      	ADIW R28,10
000157 c0a4      	RJMP _0x2020002
                 ; 0000 004F         }
                 ; 0000 0050 
                 ; 0000 0051         else if(Type==1){
                 _0x1B:
000158 89a8      	LDD  R26,Y+16
000159 30a1      	CPI  R26,LOW(0x1)
00015a f011      	BREQ PC+3
00015b 940c 01fa 	JMP _0x25
                 ; 0000 0052         signed long int a;
                 ; 0000 0053         unsigned char b;
                 ; 0000 0054         a = Number1;
00015d 9725      	SBIW R28,5
                 ;	Type -> Y+21
                 ;	Lenght -> Y+20
                 ;	IsSign -> Y+19
                 ;	NumbersAfterDot -> Y+18
                 ;	Number0 -> Y+14
                 ;	Number1 -> Y+10
                 ;	k -> Y+6
                 ;	i -> Y+5
                 ;	a -> Y+1
                 ;	b -> Y+0
                +
00015e 85ea     +LDD R30 , Y + 10
00015f 85fb     +LDD R31 , Y + 10 + 1
000160 856c     +LDD R22 , Y + 10 + 2
000161 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
                +
000162 83e9     +STD Y + 1 , R30
000163 83fa     +STD Y + 1 + 1 , R31
000164 836b     +STD Y + 1 + 2 , R22
000165 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0000 0055 
                 ; 0000 0056             if(IsSign==1){
000166 89ab      	LDD  R26,Y+19
000167 30a1      	CPI  R26,LOW(0x1)
000168 f449      	BRNE _0x26
                 ; 0000 0057                 if(a>=0){
000169 81ac      	LDD  R26,Y+4
00016a 23aa      	TST  R26
00016b f012      	BRMI _0x27
                 ; 0000 0058                 lcd_putchar('+');
00016c e2eb      	LDI  R30,LOW(43)
00016d c001      	RJMP _0x37
                 ; 0000 0059                 }
                 ; 0000 005A                 else{
                 _0x27:
                 ; 0000 005B                 lcd_putchar('-');
00016e e2ed      	LDI  R30,LOW(45)
                 _0x37:
00016f 93ea      	ST   -Y,R30
000170 940e 02c6 	CALL _lcd_putchar
                 ; 0000 005C                 }
                 ; 0000 005D             }
                 ; 0000 005E 
                 ; 0000 005F             if(a<0){
                 _0x26:
000172 81ac      	LDD  R26,Y+4
000173 23aa      	TST  R26
000174 f472      	BRPL _0x29
                 ; 0000 0060             a = a*(-1);
                +
000175 81e9     +LDD R30 , Y + 1
000176 81fa     +LDD R31 , Y + 1 + 1
000177 816b     +LDD R22 , Y + 1 + 2
000178 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
                +
000179 efaf     +LDI R26 , LOW ( 0xFFFFFFFF )
00017a efbf     +LDI R27 , HIGH ( 0xFFFFFFFF )
00017b ef8f     +LDI R24 , BYTE3 ( 0xFFFFFFFF )
00017c ef9f     +LDI R25 , BYTE4 ( 0xFFFFFFFF )
                 	__GETD2N 0xFFFFFFFF
00017d 940e 037e 	CALL __MULD12
                +
00017f 83e9     +STD Y + 1 , R30
000180 83fa     +STD Y + 1 + 1 , R31
000181 836b     +STD Y + 1 + 2 , R22
000182 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0000 0061             }
                 ; 0000 0062 
                 ; 0000 0063             if(k*10<a){
                 _0x29:
                +
000183 81ee     +LDD R30 , Y + 6
000184 81ff     +LDD R31 , Y + 6 + 1
000185 8568     +LDD R22 , Y + 6 + 2
000186 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
000187 e0aa     +LDI R26 , LOW ( 0xA )
000188 e0b0     +LDI R27 , HIGH ( 0xA )
000189 e080     +LDI R24 , BYTE3 ( 0xA )
00018a e090     +LDI R25 , BYTE4 ( 0xA )
                 	__GETD2N 0xA
00018b 940e 035e 	CALL __MULD12U
00018d 01df      	MOVW R26,R30
00018e 01cb      	MOVW R24,R22
                +
00018f 81e9     +LDD R30 , Y + 1
000190 81fa     +LDD R31 , Y + 1 + 1
000191 816b     +LDD R22 , Y + 1 + 2
000192 817c     +LDD R23 , Y + 1 + 3
                 	__GETD1S 1
000193 940e 03c0 	CALL __CPD21
000195 f490      	BRSH _0x2A
                 ; 0000 0064             a = k*10 - 1;
                +
000196 81ee     +LDD R30 , Y + 6
000197 81ff     +LDD R31 , Y + 6 + 1
000198 8568     +LDD R22 , Y + 6 + 2
000199 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
00019a e0aa     +LDI R26 , LOW ( 0xA )
00019b e0b0     +LDI R27 , HIGH ( 0xA )
00019c e080     +LDI R24 , BYTE3 ( 0xA )
00019d e090     +LDI R25 , BYTE4 ( 0xA )
                 	__GETD2N 0xA
00019e 940e 035e 	CALL __MULD12U
                +
0001a0 50e1     +SUBI R30 , LOW ( 1 )
0001a1 40f0     +SBCI R31 , HIGH ( 1 )
0001a2 4060     +SBCI R22 , BYTE3 ( 1 )
0001a3 4070     +SBCI R23 , BYTE4 ( 1 )
                 	__SUBD1N 1
                +
0001a4 83e9     +STD Y + 1 , R30
0001a5 83fa     +STD Y + 1 + 1 , R31
0001a6 836b     +STD Y + 1 + 2 , R22
0001a7 837c     +STD Y + 1 + 3 , R23
                 	__PUTD1S 1
                 ; 0000 0065             }
                 ; 0000 0066 
                 ; 0000 0067             for(i=0;i<Lenght;i++){
                 _0x2A:
0001a8 e0e0      	LDI  R30,LOW(0)
0001a9 83ed      	STD  Y+5,R30
                 _0x2C:
0001aa 89ec      	LDD  R30,Y+20
0001ab 81ad      	LDD  R26,Y+5
0001ac 17ae      	CP   R26,R30
0001ad f010      	BRLO PC+3
0001ae 940c 01f7 	JMP _0x2D
                 ; 0000 0068                 if(NumbersAfterDot!=0){
0001b0 89ea      	LDD  R30,Y+18
0001b1 30e0      	CPI  R30,0
0001b2 f071      	BREQ _0x2E
                 ; 0000 0069                     if(Lenght-NumbersAfterDot==i){
0001b3 89ac      	LDD  R26,Y+20
0001b4 27bb      	CLR  R27
0001b5 e0f0      	LDI  R31,0
0001b6 1bae      	SUB  R26,R30
0001b7 0bbf      	SBC  R27,R31
0001b8 81ed      	LDD  R30,Y+5
0001b9 e0f0      	LDI  R31,0
0001ba 17ea      	CP   R30,R26
0001bb 07fb      	CPC  R31,R27
0001bc f421      	BRNE _0x2F
                 ; 0000 006A                     lcd_putchar('.');
0001bd e2ee      	LDI  R30,LOW(46)
0001be 93ea      	ST   -Y,R30
0001bf 940e 02c6 	CALL _lcd_putchar
                 ; 0000 006B                     }
                 ; 0000 006C                 }
                 _0x2F:
                 ; 0000 006D             b = a/k;
                 _0x2E:
                +
0001c1 81ee     +LDD R30 , Y + 6
0001c2 81ff     +LDD R31 , Y + 6 + 1
0001c3 8568     +LDD R22 , Y + 6 + 2
0001c4 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
                +
0001c5 81a9     +LDD R26 , Y + 1
0001c6 81ba     +LDD R27 , Y + 1 + 1
0001c7 818b     +LDD R24 , Y + 1 + 2
0001c8 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
0001c9 940e 0383 	CALL __DIVD21U
0001cb 83e8      	ST   Y,R30
                 ; 0000 006E             lcd_putchar( NumToIndex( b ) );
0001cc 93ea      	ST   -Y,R30
0001cd de94      	RCALL _NumToIndex
0001ce 93ea      	ST   -Y,R30
0001cf 940e 02c6 	CALL _lcd_putchar
                 ; 0000 006F             a = a - b*k;
0001d1 81a8      	LD   R26,Y
0001d2 27bb      	CLR  R27
                +
0001d3 81ee     +LDD R30 , Y + 6
0001d4 81ff     +LDD R31 , Y + 6 + 1
0001d5 8568     +LDD R22 , Y + 6 + 2
0001d6 8579     +LDD R23 , Y + 6 + 3
                 	__GETD1S 6
0001d7 940e 0359 	CALL __CWD2
0001d9 940e 035e 	CALL __MULD12U
                +
0001db 81a9     +LDD R26 , Y + 1
0001dc 81ba     +LDD R27 , Y + 1 + 1
0001dd 818b     +LDD R24 , Y + 1 + 2
0001de 819c     +LDD R25 , Y + 1 + 3
                 	__GETD2S 1
0001df 940e 034c 	CALL __SUBD21
                +
0001e1 83a9     +STD Y + 1 , R26
0001e2 83ba     +STD Y + 1 + 1 , R27
0001e3 838b     +STD Y + 1 + 2 , R24
0001e4 839c     +STD Y + 1 + 3 , R25
                 	__PUTD2S 1
                 ; 0000 0070             k = k/10;
                +
0001e5 81ae     +LDD R26 , Y + 6
0001e6 81bf     +LDD R27 , Y + 6 + 1
0001e7 8588     +LDD R24 , Y + 6 + 2
0001e8 8599     +LDD R25 , Y + 6 + 3
                 	__GETD2S 6
                +
0001e9 e0ea     +LDI R30 , LOW ( 0xA )
0001ea e0f0     +LDI R31 , HIGH ( 0xA )
0001eb e060     +LDI R22 , BYTE3 ( 0xA )
0001ec e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
0001ed 940e 0383 	CALL __DIVD21U
                +
0001ef 83ee     +STD Y + 6 , R30
0001f0 83ff     +STD Y + 6 + 1 , R31
0001f1 8768     +STD Y + 6 + 2 , R22
0001f2 8779     +STD Y + 6 + 3 , R23
                 	__PUTD1S 6
                 ; 0000 0071             }
0001f3 81ed      	LDD  R30,Y+5
0001f4 5fef      	SUBI R30,-LOW(1)
0001f5 83ed      	STD  Y+5,R30
0001f6 cfb3      	RJMP _0x2C
                 _0x2D:
                 ; 0000 0072         return 1;
0001f7 e0e1      	LDI  R30,LOW(1)
0001f8 962a      	ADIW R28,10
0001f9 c002      	RJMP _0x2020002
                 ; 0000 0073         }
                 ; 0000 0074     }
                 _0x25:
0001fa 9625      	ADIW R28,5
                 ; 0000 0075 return 0;
                 _0x17:
0001fb e0e0      	LDI  R30,LOW(0)
                 _0x2020002:
0001fc 962c      	ADIW R28,12
0001fd 9508      	RET
                 ; 0000 0076 }
                 ;
                 ;
                 ;
                 ;#define TEMPERATURE_BOIL PORTA.1
                 ;#define TEMPERATURE_S_INP PORTA.2
                 ;#define TEMPERATURE_S_OUT PORTA.3
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;#define ADC_VREF_TYPE 0x00
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 008A {
                 _read_adc:
                 ; 0000 008B ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
0001fe 81e8      	LD   R30,Y
0001ff b9e7      	OUT  0x7,R30
                 ; 0000 008C // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 008D delay_us(10);
                +
000200 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000201 958a     +DEC R24
000202 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 008E // Start the AD conversion
                 ; 0000 008F ADCSRA|=0x40;
000203 9a36      	SBI  0x6,6
                 ; 0000 0090 // Wait for the AD conversion to complete
                 ; 0000 0091 while ((ADCSRA & 0x10)==0);
                 _0x30:
000204 9b34      	SBIS 0x6,4
000205 cffe      	RJMP _0x30
                 ; 0000 0092 ADCSRA|=0x10;
000206 9a34      	SBI  0x6,4
                 ; 0000 0093 return ADCW;
000207 b1e4      	IN   R30,0x4
000208 b1f5      	IN   R31,0x4+1
000209 940c 033e 	JMP  _0x2020001
                 ; 0000 0094 }
                 ;
                 ;
                 ;
                 ;
                 ;void main(void){
                 ; 0000 0099 void main(void){
                 _main:
                 ; 0000 009A // Input/Output Ports initialization
                 ; 0000 009B // Port A initialization
                 ; 0000 009C // Func7=Out Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=In
                 ; 0000 009D // State7=T State6=T State5=T State4=T State3=T State2=T State1=0 State0=0
                 ; 0000 009E PORTA=0x00;
00020b e0e0      	LDI  R30,LOW(0)
00020c bbeb      	OUT  0x1B,R30
                 ; 0000 009F DDRA=0b00000000;
00020d bbea      	OUT  0x1A,R30
                 ; 0000 00A0 
                 ; 0000 00A1 // Port B initialization
                 ; 0000 00A2 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=Out
                 ; 0000 00A3 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00A4 PORTB=0x00;
00020e bbe8      	OUT  0x18,R30
                 ; 0000 00A5 DDRB=0b00000011;
00020f e0e3      	LDI  R30,LOW(3)
000210 bbe7      	OUT  0x17,R30
                 ; 0000 00A6 
                 ; 0000 00A7 // Port C initialization
                 ; 0000 00A8 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00A9 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00AA PORTC=0x00;
000211 e0e0      	LDI  R30,LOW(0)
000212 bbe5      	OUT  0x15,R30
                 ; 0000 00AB DDRC=0b00000000;
000213 bbe4      	OUT  0x14,R30
                 ; 0000 00AC 
                 ; 0000 00AD // Port D initialization
                 ; 0000 00AE // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00AF // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00B0 PORTD=0x00;
000214 bbe2      	OUT  0x12,R30
                 ; 0000 00B1 DDRD=0b00000000;
000215 bbe1      	OUT  0x11,R30
                 ; 0000 00B2 
                 ; 0000 00B3 // Timer/Counter 0 initialization
                 ; 0000 00B4 // Clock source: System Clock
                 ; 0000 00B5 // Clock value: Timer 0 Stopped
                 ; 0000 00B6 // Mode: Normal top=FFh
                 ; 0000 00B7 // OC0 output: Disconnected
                 ; 0000 00B8 TCCR0=0x00;
000216 bfe3      	OUT  0x33,R30
                 ; 0000 00B9 TCNT0=0x00;
000217 bfe2      	OUT  0x32,R30
                 ; 0000 00BA OCR0=0x00;
000218 bfec      	OUT  0x3C,R30
                 ; 0000 00BB 
                 ; 0000 00BC // Timer/Counter 1 initialization
                 ; 0000 00BD // Clock source: System Clock
                 ; 0000 00BE // Clock value: Timer1 Stopped
                 ; 0000 00BF // Mode: Normal top=FFFFh
                 ; 0000 00C0 // OC1A output: Discon.
                 ; 0000 00C1 // OC1B output: Discon.
                 ; 0000 00C2 // Noise Canceler: Off
                 ; 0000 00C3 // Input Capture on Falling Edge
                 ; 0000 00C4 // Timer1 Overflow Interrupt: Off
                 ; 0000 00C5 // Input Capture Interrupt: Off
                 ; 0000 00C6 // Compare A Match Interrupt: Off
                 ; 0000 00C7 // Compare B Match Interrupt: Off
                 ; 0000 00C8 TCCR1A=0x00;
000219 bdef      	OUT  0x2F,R30
                 ; 0000 00C9 TCCR1B=0x00;
00021a bdee      	OUT  0x2E,R30
                 ; 0000 00CA TCNT1H=0x00;
00021b bded      	OUT  0x2D,R30
                 ; 0000 00CB TCNT1L=0x00;
00021c bdec      	OUT  0x2C,R30
                 ; 0000 00CC ICR1H=0x00;
00021d bde7      	OUT  0x27,R30
                 ; 0000 00CD ICR1L=0x00;
00021e bde6      	OUT  0x26,R30
                 ; 0000 00CE OCR1AH=0x00;
00021f bdeb      	OUT  0x2B,R30
                 ; 0000 00CF OCR1AL=0x00;
000220 bdea      	OUT  0x2A,R30
                 ; 0000 00D0 OCR1BH=0x00;
000221 bde9      	OUT  0x29,R30
                 ; 0000 00D1 OCR1BL=0x00;
000222 bde8      	OUT  0x28,R30
                 ; 0000 00D2 
                 ; 0000 00D3 // Timer/Counter 2 initialization
                 ; 0000 00D4 // Clock source: System Clock
                 ; 0000 00D5 // Clock value: Timer2 Stopped
                 ; 0000 00D6 // Mode: Normal top=FFh
                 ; 0000 00D7 // OC2 output: Disconnected
                 ; 0000 00D8 ASSR=0x00;
000223 bde2      	OUT  0x22,R30
                 ; 0000 00D9 TCCR2=0x00;
000224 bde5      	OUT  0x25,R30
                 ; 0000 00DA TCNT2=0x00;
000225 bde4      	OUT  0x24,R30
                 ; 0000 00DB OCR2=0x00;
000226 bde3      	OUT  0x23,R30
                 ; 0000 00DC 
                 ; 0000 00DD // External Interrupt(s) initialization
                 ; 0000 00DE // INT0: Off
                 ; 0000 00DF // INT1: Off
                 ; 0000 00E0 // INT2: Off
                 ; 0000 00E1 MCUCR=0x00;
000227 bfe5      	OUT  0x35,R30
                 ; 0000 00E2 MCUCSR=0x00;
000228 bfe4      	OUT  0x34,R30
                 ; 0000 00E3 
                 ; 0000 00E4 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00E5 TIMSK=0x00;
000229 bfe9      	OUT  0x39,R30
                 ; 0000 00E6 
                 ; 0000 00E7 // Analog Comparator initialization
                 ; 0000 00E8 // Analog Comparator: Off
                 ; 0000 00E9 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00EA ACSR=0x80;
00022a e8e0      	LDI  R30,LOW(128)
00022b b9e8      	OUT  0x8,R30
                 ; 0000 00EB SFIOR=0x00;
00022c e0e0      	LDI  R30,LOW(0)
00022d bfe0      	OUT  0x30,R30
                 ; 0000 00EC 
                 ; 0000 00ED // ADC initialization
                 ; 0000 00EE // ADC Clock frequency: 1000.000 kHz
                 ; 0000 00EF // ADC Voltage Reference: AREF pin
                 ; 0000 00F0 // Only the 8 most significant bits of
                 ; 0000 00F1 // the AD conversion result are used
                 ; 0000 00F2 ADMUX=ADC_VREF_TYPE & 0xff;
00022e b9e7      	OUT  0x7,R30
                 ; 0000 00F3 ADCSRA=0x83;
00022f e8e3      	LDI  R30,LOW(131)
000230 b9e6      	OUT  0x6,R30
                 ; 0000 00F4 
                 ; 0000 00F5 // LCD module initialization
                 ; 0000 00F6 lcd_init(20);
000231 e1e4      	LDI  R30,LOW(20)
000232 93ea      	ST   -Y,R30
000233 940e 0300 	CALL _lcd_init
                 ; 0000 00F7 
                 ; 0000 00F8 // Global enable interrupts
                 ; 0000 00F9 #asm("sei")
000235 9478      	sei
                 ; 0000 00FA 
                 ; 0000 00FB 
                 ; 0000 00FC 
                 ; 0000 00FD 
                 ; 0000 00FE     while(1){
                 _0x33:
                 ; 0000 00FF     unsigned int a;
                 ; 0000 0100     a = read_adc(0);
000236 9722      	SBIW R28,2
                 ;	a -> Y+0
000237 e0e0      	LDI  R30,LOW(0)
000238 93ea      	ST   -Y,R30
000239 dfc4      	RCALL _read_adc
00023a 83e8      	ST   Y,R30
00023b 83f9      	STD  Y+1,R31
                 ; 0000 0101     lcd_clear();
00023c 940e 02b0 	CALL _lcd_clear
                 ; 0000 0102     lcd_put_number(1,4,0,0,0,a);
00023e e0e1      	LDI  R30,LOW(1)
00023f 93ea      	ST   -Y,R30
000240 e0e4      	LDI  R30,LOW(4)
000241 93ea      	ST   -Y,R30
000242 e0e0      	LDI  R30,LOW(0)
000243 93ea      	ST   -Y,R30
000244 93ea      	ST   -Y,R30
                +
000245 e0e0     +LDI R30 , LOW ( 0x0 )
000246 e0f0     +LDI R31 , HIGH ( 0x0 )
000247 e060     +LDI R22 , BYTE3 ( 0x0 )
000248 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
000249 940e 03bb 	CALL __PUTPARD1
00024b 85e8      	LDD  R30,Y+8
00024c 85f9      	LDD  R31,Y+8+1
00024d 2766      	CLR  R22
00024e 2777      	CLR  R23
00024f 940e 03bb 	CALL __PUTPARD1
000251 de4f      	RCALL _lcd_put_number
                 ; 0000 0103     lcd_putsf(" bit");
                +
000252 e5e4     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000253 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000254 93fa      	ST   -Y,R31
000255 93ea      	ST   -Y,R30
000256 940e 02df 	CALL _lcd_putsf
                 ; 0000 0104     delay_ms(1000);
000258 eee8      	LDI  R30,LOW(1000)
000259 e0f3      	LDI  R31,HIGH(1000)
00025a 93fa      	ST   -Y,R31
00025b 93ea      	ST   -Y,R30
00025c 940e 0340 	CALL _delay_ms
                 ; 0000 0105     }
00025e 9622      	ADIW R28,2
00025f cfd6      	RJMP _0x33
                 ; 0000 0106 }
                 _0x36:
000260 cfff      	RJMP _0x36
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
000261 e0ff          ldi   r31,15
                 __lcd_delay0:
000262 95fa          dec   r31
000263 f7f1          brne  __lcd_delay0
000264 9508      	RET
                 __lcd_ready:
000265 b3a4          in    r26,__lcd_direction
000266 70af          andi  r26,0xf                 ;set as input
000267 bba4          out   __lcd_direction,r26
000268 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
000269 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
00026a dff6      	RCALL __lcd_delay_G100
00026b 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
00026c dff4      	RCALL __lcd_delay_G100
00026d b3a3          in    r26,__lcd_pin
00026e 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
00026f dff1      	RCALL __lcd_delay_G100
000270 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
000271 dfef      	RCALL __lcd_delay_G100
000272 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000273 fda7          sbrc  r26,__lcd_busy_flag
000274 cff5          rjmp  __lcd_busy
000275 9508      	RET
                 __lcd_write_nibble_G100:
000276 7fa0          andi  r26,0xf0
000277 2bab          or    r26,r27
000278 bba5          out   __lcd_port,r26          ;write
000279 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
00027a 940e 0261 	CALL __lcd_delay_G100
00027c 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
00027d 940e 0261 	CALL __lcd_delay_G100
00027f 9508      	RET
                 __lcd_write_data:
000280 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000281 b3a4          in    r26,__lcd_direction
000282 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000283 bba4          out   __lcd_direction,r26
000284 b3b5          in    r27,__lcd_port
000285 70bf          andi  r27,0xf
000286 81a8          ld    r26,y
000287 dfee      	RCALL __lcd_write_nibble_G100
000288 81a8          ld    r26,y
000289 95a2          swap  r26
00028a dfeb      	RCALL __lcd_write_nibble_G100
00028b 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
00028c 940c 033e 	JMP  _0x2020001
                 __lcd_read_nibble_G100:
00028e 9aaa          sbi   __lcd_port,__lcd_enable ;EN=1
00028f 940e 0261 	CALL __lcd_delay_G100
000291 b3e3          in    r30,__lcd_pin           ;read
000292 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000293 940e 0261 	CALL __lcd_delay_G100
000295 7fe0          andi  r30,0xf0
000296 9508      	RET
                 _lcd_read_byte0_G100:
000297 940e 0261 	CALL __lcd_delay_G100
000299 dff4      	RCALL __lcd_read_nibble_G100
00029a 2fae          mov   r26,r30
00029b dff2      	RCALL __lcd_read_nibble_G100
00029c 98a9          cbi   __lcd_port,__lcd_rd     ;RD=0
00029d 95e2          swap  r30
00029e 2bea          or    r30,r26
00029f 9508      	RET
                 _lcd_gotoxy:
0002a0 940e 0265 	CALL __lcd_ready
0002a2 81e8      	LD   R30,Y
0002a3 e0f0      	LDI  R31,0
0002a4 5ae0      	SUBI R30,LOW(-__base_y_G100)
0002a5 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0002a6 81e0      	LD   R30,Z
0002a7 81a9      	LDD  R26,Y+1
0002a8 0fea      	ADD  R30,R26
0002a9 93ea      	ST   -Y,R30
0002aa 940e 0280 	CALL __lcd_write_data
0002ac 8059      	LDD  R5,Y+1
0002ad 8048      	LDD  R4,Y+0
0002ae 9622      	ADIW R28,2
0002af 9508      	RET
                 _lcd_clear:
0002b0 940e 0265 	CALL __lcd_ready
0002b2 e0e2      	LDI  R30,LOW(2)
0002b3 93ea      	ST   -Y,R30
0002b4 940e 0280 	CALL __lcd_write_data
0002b6 940e 0265 	CALL __lcd_ready
0002b8 e0ec      	LDI  R30,LOW(12)
0002b9 93ea      	ST   -Y,R30
0002ba 940e 0280 	CALL __lcd_write_data
0002bc 940e 0265 	CALL __lcd_ready
0002be e0e1      	LDI  R30,LOW(1)
0002bf 93ea      	ST   -Y,R30
0002c0 940e 0280 	CALL __lcd_write_data
0002c2 e0e0      	LDI  R30,LOW(0)
0002c3 2e4e      	MOV  R4,R30
0002c4 2e5e      	MOV  R5,R30
0002c5 9508      	RET
                 _lcd_putchar:
0002c6 93ef          push r30
0002c7 93ff          push r31
0002c8 81a8          ld   r26,y
0002c9 9468          set
0002ca 30aa          cpi  r26,10
0002cb f019          breq __lcd_putchar1
0002cc 94e8          clt
0002cd 1457      	CP   R5,R7
0002ce f030      	BRLO _0x2000004
                 	__lcd_putchar1:
0002cf 9443      	INC  R4
0002d0 e0e0      	LDI  R30,LOW(0)
0002d1 93ea      	ST   -Y,R30
0002d2 924a      	ST   -Y,R4
0002d3 dfcc      	RCALL _lcd_gotoxy
0002d4 f036      	brts __lcd_putchar0
                 _0x2000004:
0002d5 9453      	INC  R5
0002d6 df8e          rcall __lcd_ready
0002d7 9aa8          sbi  __lcd_port,__lcd_rs ;RS=1
0002d8 81a8          ld   r26,y
0002d9 93aa          st   -y,r26
0002da dfa5          rcall __lcd_write_data
                 __lcd_putchar0:
0002db 91ff          pop  r31
0002dc 91ef          pop  r30
0002dd 940c 033e 	JMP  _0x2020001
                 _lcd_putsf:
0002df 931a      	ST   -Y,R17
                 _0x2000008:
0002e0 81e9      	LDD  R30,Y+1
0002e1 81fa      	LDD  R31,Y+1+1
0002e2 9631      	ADIW R30,1
0002e3 83e9      	STD  Y+1,R30
0002e4 83fa      	STD  Y+1+1,R31
0002e5 9731      	SBIW R30,1
0002e6 91e4      	LPM  R30,Z
0002e7 2f1e      	MOV  R17,R30
0002e8 30e0      	CPI  R30,0
0002e9 f019      	BREQ _0x200000A
0002ea 931a      	ST   -Y,R17
0002eb dfda      	RCALL _lcd_putchar
0002ec cff3      	RJMP _0x2000008
                 _0x200000A:
0002ed 8118      	LDD  R17,Y+0
0002ee 9623      	ADIW R28,3
0002ef 9508      	RET
                 __long_delay_G100:
0002f0 27aa          clr   r26
0002f1 27bb          clr   r27
                 __long_delay0:
0002f2 9711          sbiw  r26,1         ;2 cycles
0002f3 f7f1          brne  __long_delay0 ;2 cycles
0002f4 9508      	RET
                 __lcd_init_write_G100:
0002f5 98a9          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0002f6 b3a4          in    r26,__lcd_direction
0002f7 6fa7          ori   r26,0xf7                ;set as output
0002f8 bba4          out   __lcd_direction,r26
0002f9 b3b5          in    r27,__lcd_port
0002fa 70bf          andi  r27,0xf
0002fb 81a8          ld    r26,y
0002fc 940e 0276 	CALL __lcd_write_nibble_G100
0002fe 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
0002ff c03e      	RJMP _0x2020001
                 _lcd_init:
000300 98aa          cbi   __lcd_port,__lcd_enable ;EN=0
000301 98a8          cbi   __lcd_port,__lcd_rs     ;RS=0
000302 8078      	LDD  R7,Y+0
000303 81e8      	LD   R30,Y
000304 58e0      	SUBI R30,-LOW(128)
                +
000305 93e0 0262+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000307 81e8      	LD   R30,Y
000308 54e0      	SUBI R30,-LOW(192)
                +
000309 93e0 0263+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00030b dfe4      	RCALL __long_delay_G100
00030c e3e0      	LDI  R30,LOW(48)
00030d 93ea      	ST   -Y,R30
00030e dfe6      	RCALL __lcd_init_write_G100
00030f dfe0      	RCALL __long_delay_G100
000310 e3e0      	LDI  R30,LOW(48)
000311 93ea      	ST   -Y,R30
000312 dfe2      	RCALL __lcd_init_write_G100
000313 dfdc      	RCALL __long_delay_G100
000314 e3e0      	LDI  R30,LOW(48)
000315 93ea      	ST   -Y,R30
000316 dfde      	RCALL __lcd_init_write_G100
000317 dfd8      	RCALL __long_delay_G100
000318 e2e0      	LDI  R30,LOW(32)
000319 93ea      	ST   -Y,R30
00031a dfda      	RCALL __lcd_init_write_G100
00031b dfd4      	RCALL __long_delay_G100
00031c e2e8      	LDI  R30,LOW(40)
00031d 93ea      	ST   -Y,R30
00031e 940e 0280 	CALL __lcd_write_data
000320 dfcf      	RCALL __long_delay_G100
000321 e0e4      	LDI  R30,LOW(4)
000322 93ea      	ST   -Y,R30
000323 940e 0280 	CALL __lcd_write_data
000325 dfca      	RCALL __long_delay_G100
000326 e8e5      	LDI  R30,LOW(133)
000327 93ea      	ST   -Y,R30
000328 940e 0280 	CALL __lcd_write_data
00032a dfc5      	RCALL __long_delay_G100
00032b b3a4          in    r26,__lcd_direction
00032c 70af          andi  r26,0xf                 ;set as input
00032d bba4          out   __lcd_direction,r26
00032e 9aa9          sbi   __lcd_port,__lcd_rd     ;RD=1
00032f 940e 0297 	CALL _lcd_read_byte0_G100
000331 30e5      	CPI  R30,LOW(0x5)
000332 f011      	BREQ _0x200000B
000333 e0e0      	LDI  R30,LOW(0)
000334 c009      	RJMP _0x2020001
                 _0x200000B:
000335 940e 0265 	CALL __lcd_ready
000337 e0e6      	LDI  R30,LOW(6)
000338 93ea      	ST   -Y,R30
000339 940e 0280 	CALL __lcd_write_data
00033b 940e 02b0 	CALL _lcd_clear
00033d e0e1      	LDI  R30,LOW(1)
                 _0x2020001:
00033e 9621      	ADIW R28,1
00033f 9508      	RET
                 
                 	.DSEG
                 __base_y_G100:
000260           	.BYTE 0x4
                 
                 	.CSEG
                 
                 	.CSEG
                 _delay_ms:
000340 91e9      	ld   r30,y+
000341 91f9      	ld   r31,y+
000342 9630      	adiw r30,0
000343 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000344 ed80     +LDI R24 , LOW ( 0x7D0 )
000345 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000346 9701     +SBIW R24 , 1
000347 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000348 95a8      	wdr
000349 9731      	sbiw r30,1
00034a f7c9      	brne __delay_ms0
                 __delay_ms1:
00034b 9508      	ret
                 
                 __SUBD21:
00034c 1bae      	SUB  R26,R30
00034d 0bbf      	SBC  R27,R31
00034e 0b86      	SBC  R24,R22
00034f 0b97      	SBC  R25,R23
000350 9508      	RET
                 
                 __ANEGD1:
000351 95f0      	COM  R31
000352 9560      	COM  R22
000353 9570      	COM  R23
000354 95e1      	NEG  R30
000355 4fff      	SBCI R31,-1
000356 4f6f      	SBCI R22,-1
000357 4f7f      	SBCI R23,-1
000358 9508      	RET
                 
                 __CWD2:
000359 2f8b      	MOV  R24,R27
00035a 0f88      	ADD  R24,R24
00035b 0b88      	SBC  R24,R24
00035c 2f98      	MOV  R25,R24
00035d 9508      	RET
                 
                 __MULD12U:
00035e 9f7a      	MUL  R23,R26
00035f 2d70      	MOV  R23,R0
000360 9f6b      	MUL  R22,R27
000361 0d70      	ADD  R23,R0
000362 9ff8      	MUL  R31,R24
000363 0d70      	ADD  R23,R0
000364 9fe9      	MUL  R30,R25
000365 0d70      	ADD  R23,R0
000366 9f6a      	MUL  R22,R26
000367 2d60      	MOV  R22,R0
000368 0d71      	ADD  R23,R1
000369 9ffb      	MUL  R31,R27
00036a 0d60      	ADD  R22,R0
00036b 1d71      	ADC  R23,R1
00036c 9fe8      	MUL  R30,R24
00036d 0d60      	ADD  R22,R0
00036e 1d71      	ADC  R23,R1
00036f 2788      	CLR  R24
000370 9ffa      	MUL  R31,R26
000371 2df0      	MOV  R31,R0
000372 0d61      	ADD  R22,R1
000373 1f78      	ADC  R23,R24
000374 9feb      	MUL  R30,R27
000375 0df0      	ADD  R31,R0
000376 1d61      	ADC  R22,R1
000377 1f78      	ADC  R23,R24
000378 9fea      	MUL  R30,R26
000379 2de0      	MOV  R30,R0
00037a 0df1      	ADD  R31,R1
00037b 1f68      	ADC  R22,R24
00037c 1f78      	ADC  R23,R24
00037d 9508      	RET
                 
                 __MULD12:
00037e d029      	RCALL __CHKSIGND
00037f dfde      	RCALL __MULD12U
000380 f40e      	BRTC __MULD121
000381 dfcf      	RCALL __ANEGD1
                 __MULD121:
000382 9508      	RET
                 
                 __DIVD21U:
000383 933f      	PUSH R19
000384 934f      	PUSH R20
000385 935f      	PUSH R21
000386 2400      	CLR  R0
000387 2411      	CLR  R1
000388 2744      	CLR  R20
000389 2755      	CLR  R21
00038a e230      	LDI  R19,32
                 __DIVD21U1:
00038b 0faa      	LSL  R26
00038c 1fbb      	ROL  R27
00038d 1f88      	ROL  R24
00038e 1f99      	ROL  R25
00038f 1c00      	ROL  R0
000390 1c11      	ROL  R1
000391 1f44      	ROL  R20
000392 1f55      	ROL  R21
000393 1a0e      	SUB  R0,R30
000394 0a1f      	SBC  R1,R31
000395 0b46      	SBC  R20,R22
000396 0b57      	SBC  R21,R23
000397 f428      	BRCC __DIVD21U2
000398 0e0e      	ADD  R0,R30
000399 1e1f      	ADC  R1,R31
00039a 1f46      	ADC  R20,R22
00039b 1f57      	ADC  R21,R23
00039c c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00039d 60a1      	SBR  R26,1
                 __DIVD21U3:
00039e 953a      	DEC  R19
00039f f759      	BRNE __DIVD21U1
0003a0 01fd      	MOVW R30,R26
0003a1 01bc      	MOVW R22,R24
0003a2 01d0      	MOVW R26,R0
0003a3 01ca      	MOVW R24,R20
0003a4 915f      	POP  R21
0003a5 914f      	POP  R20
0003a6 913f      	POP  R19
0003a7 9508      	RET
                 
                 __CHKSIGND:
0003a8 94e8      	CLT
0003a9 ff77      	SBRS R23,7
0003aa c002      	RJMP __CHKSD1
0003ab dfa5      	RCALL __ANEGD1
0003ac 9468      	SET
                 __CHKSD1:
0003ad ff97      	SBRS R25,7
0003ae c00b      	RJMP __CHKSD2
0003af 2400      	CLR  R0
0003b0 95a0      	COM  R26
0003b1 95b0      	COM  R27
0003b2 9580      	COM  R24
0003b3 9590      	COM  R25
0003b4 9611      	ADIW R26,1
0003b5 1d80      	ADC  R24,R0
0003b6 1d90      	ADC  R25,R0
0003b7 f800      	BLD  R0,0
0003b8 9403      	INC  R0
0003b9 fa00      	BST  R0,0
                 __CHKSD2:
0003ba 9508      	RET
                 
                 __PUTPARD1:
0003bb 937a      	ST   -Y,R23
0003bc 936a      	ST   -Y,R22
0003bd 93fa      	ST   -Y,R31
0003be 93ea      	ST   -Y,R30
0003bf 9508      	RET
                 
                 __CPD21:
0003c0 17ae      	CP   R26,R30
0003c1 07bf      	CPC  R27,R31
0003c2 0786      	CPC  R24,R22
0003c3 0797      	CPC  R25,R23
0003c4 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  25 r1 :  11 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   4 r20:   7 r21:   6 r22:  48 r23:  47 
r24:  48 r25:  26 r26: 107 r27:  41 r28:  13 r29:   1 r30: 242 r31:  71 
x  :   3 y  : 233 z  :   9 
Registers used: 22 out of 35 (62.9%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  12 add   :  12 
adiw  :  11 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   9 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   0 brmi  :   1 brne  :  23 brpl  :   1 brsh  :   3 brtc  :   1 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  51 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  16 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   7 
cp    :   7 cpc   :   6 cpi   :  20 cpse  :   0 dec   :   4 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  10 inc   :   3 jmp   :  41 ld    :  26 ldd   : 113 ldi   : 114 
lds   :   0 lpm   :   9 lsl   :   1 lsr   :   0 mov   :  10 movw  :  11 
mul   :  10 muls  :   0 mulsu :   0 neg   :   1 nop   :   0 or    :   2 
ori   :   2 out   :  46 pop   :   5 push  :   5 rcall :  32 ret   :  21 
reti  :   0 rjmp  :  17 rol   :   7 ror   :   0 sbc   :   9 sbci  :  10 
sbi   :  11 sbic  :   0 sbis  :   1 sbiw  :  12 sbr   :   1 sbrc  :   1 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  47 std   :  51 sts   :   2 sub   :   4 subi  :   8 swap  :   2 
tst   :   2 wdr   :   1 
Instructions used: 65 out of 116 (56.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00078a   1914     16   1930   32768   5.9%
[.dseg] 0x000060 0x000264      0      4      4    2048   0.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
