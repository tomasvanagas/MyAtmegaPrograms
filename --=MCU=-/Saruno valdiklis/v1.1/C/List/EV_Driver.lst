
AVRASM ver. 2.1.30  C:\Users\Public\-=CPU=-\Saruno valdiklis\v1.1\C\List\EV_Driver.asm Sun Jul 12 18:22:02 2015

C:\Users\Public\-=CPU=-\Saruno valdiklis\v1.1\C\List\EV_Driver.asm(1057): warning: Register r4 already defined by the .DEF directive
C:\Users\Public\-=CPU=-\Saruno valdiklis\v1.1\C\List\EV_Driver.asm(1058): warning: Register r6 already defined by the .DEF directive
C:\Users\Public\-=CPU=-\Saruno valdiklis\v1.1\C\List\EV_Driver.asm(1059): warning: Register r8 already defined by the .DEF directive
C:\Users\Public\-=CPU=-\Saruno valdiklis\v1.1\C\List\EV_Driver.asm(1060): warning: Register r11 already defined by the .DEF directive
C:\Users\Public\-=CPU=-\Saruno valdiklis\v1.1\C\List\EV_Driver.asm(1061): warning: Register r10 already defined by the .DEF directive
C:\Users\Public\-=CPU=-\Saruno valdiklis\v1.1\C\List\EV_Driver.asm(1062): warning: Register r13 already defined by the .DEF directive
C:\Users\Public\-=CPU=-\Saruno valdiklis\v1.1\C\List\EV_Driver.asm(1063): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.04.4a Advanced
                 ;(C) Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega2561
                 ;Program type             : Application
                 ;Clock frequency          : 8.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega2561
                 	#pragma AVRPART MEMORY PROG_FLASH 262144
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 8192
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU RAMPZ=0x3B
                 	.EQU EIND=0x3C
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x74
                 	.EQU XMCRB=0x75
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Count0=R4
                 	.DEF _Count1=R6
                 	.DEF _Count2=R8
                 	.DEF _Count3=R11
                 	.DEF _PHASE=R10
                 	.DEF _ONE_SECOND=R13
                 	.DEF _STATED_FREQUENCY=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;INTERRUPT VECTORS
000000 940c 006b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 01ab 	JMP  _timer2_ovf_isr
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 00aa 	JMP  _timer1_ovf_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 00a9 	JMP  _timer0_ovf_isr
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
000046 940c 0000 	JMP  0x00
000048 940c 0000 	JMP  0x00
00004a 940c 0000 	JMP  0x00
00004c 940c 0000 	JMP  0x00
00004e 940c 0000 	JMP  0x00
000050 940c 0000 	JMP  0x00
000052 940c 0000 	JMP  0x00
000054 940c 0000 	JMP  0x00
000056 940c 0000 	JMP  0x00
000058 940c 0000 	JMP  0x00
00005a 940c 0000 	JMP  0x00
00005c 940c 0000 	JMP  0x00
00005e 940c 0000 	JMP  0x00
000060 940c 0000 	JMP  0x00
000062 940c 0000 	JMP  0x00
000064 940c 0000 	JMP  0x00
                 
                 _0x2000003:
000066 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000067 0002      	.DW  0x02
000068 0607      	.DW  __base_y_G100
000069 00cc      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00006a 0000      	.DW  0
                 
                 __RESET:
00006b 94f8      	CLI
00006c 27ee      	CLR  R30
00006d bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00006e e0f1      	LDI  R31,1
00006f bff5      	OUT  MCUCR,R31
000070 bfe5      	OUT  MCUCR,R30
000071 93e0 0074 	STS  XMCRA,R30
000073 93e0 0075 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000075 e1f8      	LDI  R31,0x18
000076 95a8      	WDR
000077 b7a4      	IN   R26,MCUSR
000078 7fa7      	CBR  R26,8
000079 bfa4      	OUT  MCUSR,R26
00007a 93f0 0060 	STS  WDTCSR,R31
00007c 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
00007e e08d      	LDI  R24,(14-2)+1
00007f e0a2      	LDI  R26,2
000080 27bb      	CLR  R27
                 __CLEAR_REG:
000081 93ed      	ST   X+,R30
000082 958a      	DEC  R24
000083 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000084 e080      	LDI  R24,LOW(0x2000)
000085 e290      	LDI  R25,HIGH(0x2000)
000086 e0a0      	LDI  R26,LOW(0x200)
000087 e0b2      	LDI  R27,HIGH(0x200)
                 __CLEAR_SRAM:
000088 93ed      	ST   X+,R30
000089 9701      	SBIW R24,1
00008a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00008b ecee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00008c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00008d 9185      	LPM  R24,Z+
00008e 9195      	LPM  R25,Z+
00008f 9700      	SBIW R24,0
000090 f061      	BREQ __GLOBAL_INI_END
000091 91a5      	LPM  R26,Z+
000092 91b5      	LPM  R27,Z+
000093 9005      	LPM  R0,Z+
000094 9015      	LPM  R1,Z+
000095 01bf      	MOVW R22,R30
000096 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000097 9005      	LPM  R0,Z+
000098 920d      	ST   X+,R0
000099 9701      	SBIW R24,1
00009a f7e1      	BRNE __GLOBAL_INI_LOOP
00009b 01fb      	MOVW R30,R22
00009c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
00009d bf8b      	OUT  RAMPZ,R24
                 
00009e bf8c      	OUT  EIND,R24
                 
                 ;GPIOR0 INITIALIZATION
00009f e0e0      	LDI  R30,0x00
0000a0 bbee      	OUT  GPIOR0,R30
                 
                 ;STACK POINTER INITIALIZATION
0000a1 efef      	LDI  R30,LOW(0x21FF)
0000a2 bfed      	OUT  SPL,R30
0000a3 e2e1      	LDI  R30,HIGH(0x21FF)
0000a4 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a5 e0c0      	LDI  R28,LOW(0x600)
0000a6 e0d6      	LDI  R29,HIGH(0x600)
                 
0000a7 940c 01ac 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x600
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Project :
                 ;Version :
                 ;Date    : 2014.10.10
                 ;
                 ;Chip type               : ATmega2561
                 ;*****************************************************/
                 ;
                 ;#include <mega2561.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;//#define PORTC.0 PHASE_UP1
                 ;//#define PORTC.0 PHASE_UP2
                 ;//#define PORTC.0 PHASE_UP3
                 ;//#define PORTC.0 PHASE_DOWN1
                 ;//#define PORTC.0 PHASE_DOWN2
                 ;//#define PORTC.0 PHASE_DOWN3
                 ;
                 ;
                 ;
                 ;// Alphanumeric LCD Module functions
                 ;#asm
                    .equ __lcd_port=0x12 ;PORTD
                 ; 0000 0018 #endasm
                 ;#include <lcd.h>
                 ;
                 ;
                 ;char NumToIndex(char Num){
                 ; 0000 001C char NumToIndex(char Num){
                 
                 	.CSEG
                 ; 0000 001D     if(Num==0){     return '0';}
                 ;	Num -> Y+0
                 ; 0000 001E     else if(Num==1){return '1';}
                 ; 0000 001F     else if(Num==2){return '2';}
                 ; 0000 0020     else if(Num==3){return '3';}
                 ; 0000 0021     else if(Num==4){return '4';}
                 ; 0000 0022     else if(Num==5){return '5';}
                 ; 0000 0023     else if(Num==6){return '6';}
                 ; 0000 0024     else if(Num==7){return '7';}
                 ; 0000 0025     else if(Num==8){return '8';}
                 ; 0000 0026     else if(Num==9){return '9';}
                 ; 0000 0027     else{           return '-';}
                 ; 0000 0028 return 0;
                 ; 0000 0029 }
                 ;
                 ;char lcd_put_number(char Type, char Lenght, char IsSign,
                 ; 0000 002C 
                 ; 0000 002D                     char NumbersAfterDot,
                 ; 0000 002E 
                 ; 0000 002F                     unsigned long int Number0,
                 ; 0000 0030                     signed long int Number1){
                 ; 0000 0031     if(Lenght>0){
                 ;	Type -> Y+11
                 ;	Lenght -> Y+10
                 ;	IsSign -> Y+9
                 ;	NumbersAfterDot -> Y+8
                 ;	Number0 -> Y+4
                 ;	Number1 -> Y+0
                 ; 0000 0032     unsigned long int k = 1;
                 ; 0000 0033     unsigned char i;
                 ; 0000 0034         for(i=0;i<Lenght-1;i++) k = k*10;
                 ;	Type -> Y+16
                 ;	Lenght -> Y+15
                 ;	IsSign -> Y+14
                 ;	NumbersAfterDot -> Y+13
                 ;	Number0 -> Y+9
                 ;	Number1 -> Y+5
                 ;	k -> Y+1
                 ;	i -> Y+0
                 ; 0000 0036 if(Type==0){
                 ; 0000 0037         unsigned long int a;
                 ; 0000 0038         unsigned char b;
                 ; 0000 0039         a = Number0;
                 ;	Type -> Y+21
                 ;	Lenght -> Y+20
                 ;	IsSign -> Y+19
                 ;	NumbersAfterDot -> Y+18
                 ;	Number0 -> Y+14
                 ;	Number1 -> Y+10
                 ;	k -> Y+6
                 ;	i -> Y+5
                 ;	a -> Y+1
                 ;	b -> Y+0
                 ; 0000 003A 
                 ; 0000 003B             if(IsSign==1){
                 ; 0000 003C             lcd_putchar('+');
                 ; 0000 003D             }
                 ; 0000 003E 
                 ; 0000 003F             if(a<0){
                 ; 0000 0040             a = a*(-1);
                 ; 0000 0041             }
                 ; 0000 0042 
                 ; 0000 0043             if(k*10<a){
                 ; 0000 0044             a = k*10 - 1;
                 ; 0000 0045             }
                 ; 0000 0046 
                 ; 0000 0047             for(i=0;i<Lenght;i++){
                 ; 0000 0048                 if(NumbersAfterDot!=0){
                 ; 0000 0049                     if(Lenght-NumbersAfterDot==i){
                 ; 0000 004A                     lcd_putchar('.');
                 ; 0000 004B                     }
                 ; 0000 004C                 }
                 ; 0000 004D             b = a/k;
                 ; 0000 004E             lcd_putchar( NumToIndex( b ) );
                 ; 0000 004F             a = a - b*k;
                 ; 0000 0050             k = k/10;
                 ; 0000 0051             }
                 ; 0000 0052         return 1;
                 ; 0000 0053         }
                 ; 0000 0054 
                 ; 0000 0055         else if(Type==1){
                 ; 0000 0056         signed long int a;
                 ; 0000 0057         unsigned char b;
                 ; 0000 0058         a = Number1;
                 ;	Type -> Y+21
                 ;	Lenght -> Y+20
                 ;	IsSign -> Y+19
                 ;	NumbersAfterDot -> Y+18
                 ;	Number0 -> Y+14
                 ;	Number1 -> Y+10
                 ;	k -> Y+6
                 ;	i -> Y+5
                 ;	a -> Y+1
                 ;	b -> Y+0
                 ; 0000 0059 
                 ; 0000 005A             if(IsSign==1){
                 ; 0000 005B                 if(a>=0){
                 ; 0000 005C                 lcd_putchar('+');
                 ; 0000 005D                 }
                 ; 0000 005E                 else{
                 ; 0000 005F                 lcd_putchar('-');
                 ; 0000 0060                 }
                 ; 0000 0061             }
                 ; 0000 0062 
                 ; 0000 0063             if(a<0){
                 ; 0000 0064             a = a*(-1);
                 ; 0000 0065             }
                 ; 0000 0066 
                 ; 0000 0067             if(k*10<a){
                 ; 0000 0068             a = k*10 - 1;
                 ; 0000 0069             }
                 ; 0000 006A 
                 ; 0000 006B             for(i=0;i<Lenght;i++){
                 ; 0000 006C                 if(NumbersAfterDot!=0){
                 ; 0000 006D                     if(Lenght-NumbersAfterDot==i){
                 ; 0000 006E                     lcd_putchar('.');
                 ; 0000 006F                     }
                 ; 0000 0070                 }
                 ; 0000 0071             b = a/k;
                 ; 0000 0072             lcd_putchar( NumToIndex( b ) );
                 ; 0000 0073             a = a - b*k;
                 ; 0000 0074             k = k/10;
                 ; 0000 0075             }
                 ; 0000 0076         return 1;
                 ; 0000 0077         }
                 ; 0000 0078     }
                 ; 0000 0079 return 0;
                 ; 0000 007A }
                 ;
                 ;
                 ;unsigned int Count0, Count1, Count2;
                 ;unsigned char Count3;
                 ;unsigned char PHASE;
                 ;unsigned char ONE_SECOND;
                 ;
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void){
                 ; 0000 0084 interrupt [24] void timer0_ovf_isr(void){
                 _timer0_ovf_isr:
                 ; 0000 0085 //Count0++;
                 ; 0000 0086 }
0000a9 9518      	RETI
                 ;
                 ;
                 ;
                 ;
                 ;
                 ;unsigned char STATED_FREQUENCY, CYCLE_PHASE;
                 ;unsigned int STATED_PWM, PWM_PHASE, PWM_LENGHT;
                 ;
                 ;
                 ;unsigned char PHASE_PHASE;
                 ;unsigned char PHASE_UP_A, PHASE_UP_B, PHASE_UP_C, PHASE_DOWN_A, PHASE_DOWN_B, PHASE_DOWN_C;
                 ;
                 ;
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void){
                 ; 0000 0094 interrupt [21] void timer1_ovf_isr(void){
                 _timer1_ovf_isr:
0000aa 93aa      	ST   -Y,R26
0000ab 93ea      	ST   -Y,R30
0000ac 93fa      	ST   -Y,R31
0000ad b7ef      	IN   R30,SREG
0000ae 93ea      	ST   -Y,R30
                 ; 0000 0095 
                 ; 0000 0096 Count0++;
0000af 01f2      	MOVW R30,R4
0000b0 9631      	ADIW R30,1
0000b1 012f      	MOVW R4,R30
                 ; 0000 0097     if(Count0>=150){
0000b2 e9e6      	LDI  R30,LOW(150)
0000b3 e0f0      	LDI  R31,HIGH(150)
0000b4 164e      	CP   R4,R30
0000b5 065f      	CPC  R5,R31
0000b6 f410      	BRSH PC+3
0000b7 940c 0183 	JMP _0x30
                 ; 0000 0098     Count0 = 0;
0000b9 2444      	CLR  R4
0000ba 2455      	CLR  R5
                 ; 0000 0099     PHASE_PHASE++;
0000bb 91e0 0600 	LDS  R30,_PHASE_PHASE
0000bd 5fef      	SUBI R30,-LOW(1)
0000be 93e0 0600 	STS  _PHASE_PHASE,R30
                 ; 0000 009A         if(PHASE_PHASE>=12){
0000c0 91a0 0600 	LDS  R26,_PHASE_PHASE
0000c2 30ac      	CPI  R26,LOW(0xC)
0000c3 f018      	BRLO _0x31
                 ; 0000 009B         PHASE_PHASE = 0;
0000c4 e0e0      	LDI  R30,LOW(0)
0000c5 93e0 0600 	STS  _PHASE_PHASE,R30
                 ; 0000 009C         }
                 ; 0000 009D 
                 ; 0000 009E 
                 ; 0000 009F 
                 ; 0000 00A0         if(PHASE_PHASE==0){
                 _0x31:
0000c7 91e0 0600 	LDS  R30,_PHASE_PHASE
0000c9 30e0      	CPI  R30,0
0000ca f429      	BRNE _0x32
                 ; 0000 00A1         PHASE_UP_A = 0;
0000cb 940e 026c 	CALL SUBOPT_0x0
                 ; 0000 00A2         PHASE_DOWN_A = 0;
                 ; 0000 00A3         PHASE_UP_B = 0;
0000cd 940e 0272 	CALL SUBOPT_0x1
                 ; 0000 00A4         //PHASE_DOWN_B = 0;
                 ; 0000 00A5         //PHASE_UP_C = 0;
                 ; 0000 00A6         PHASE_DOWN_C = 0;
                 ; 0000 00A7 
                 ; 0000 00A8         PHASE_DOWN_B = 1;
0000cf c095      	RJMP _0x78
                 ; 0000 00A9         PHASE_UP_C = 1;
                 ; 0000 00AA         }
                 ; 0000 00AB         else if(PHASE_PHASE==1){
                 _0x32:
0000d0 91a0 0600 	LDS  R26,_PHASE_PHASE
0000d2 30a1      	CPI  R26,LOW(0x1)
0000d3 f441      	BRNE _0x34
                 ; 0000 00AC         //PHASE_UP_A = 0;
                 ; 0000 00AD         PHASE_DOWN_A = 0;
0000d4 940e 0278 	CALL SUBOPT_0x2
                 ; 0000 00AE         PHASE_UP_B = 0;
0000d6 940e 0272 	CALL SUBOPT_0x1
                 ; 0000 00AF         //PHASE_DOWN_B = 0;
                 ; 0000 00B0         //PHASE_UP_C = 0;
                 ; 0000 00B1         PHASE_DOWN_C = 0;
                 ; 0000 00B2 
                 ; 0000 00B3         PHASE_UP_A = 1;
0000d8 e0e1      	LDI  R30,LOW(1)
0000d9 93e0 0601 	STS  _PHASE_UP_A,R30
                 ; 0000 00B4         PHASE_DOWN_B = 1;
0000db c089      	RJMP _0x78
                 ; 0000 00B5         PHASE_UP_C = 1;
                 ; 0000 00B6         }
                 ; 0000 00B7         else if(PHASE_PHASE==2){
                 _0x34:
0000dc 91a0 0600 	LDS  R26,_PHASE_PHASE
0000de 30a2      	CPI  R26,LOW(0x2)
0000df f461      	BRNE _0x36
                 ; 0000 00B8         //PHASE_UP_A = 0;
                 ; 0000 00B9         PHASE_DOWN_A = 0;
0000e0 940e 0278 	CALL SUBOPT_0x2
                 ; 0000 00BA         PHASE_UP_B = 0;
0000e2 93e0 0602 	STS  _PHASE_UP_B,R30
                 ; 0000 00BB         //PHASE_DOWN_B = 0;
                 ; 0000 00BC         PHASE_UP_C = 0;
0000e4 940e 027c 	CALL SUBOPT_0x3
                 ; 0000 00BD         PHASE_DOWN_C = 0;
                 ; 0000 00BE 
                 ; 0000 00BF         PHASE_UP_A = 1;
0000e6 93e0 0601 	STS  _PHASE_UP_A,R30
                 ; 0000 00C0         PHASE_DOWN_B = 1;
0000e8 e0e1      	LDI  R30,LOW(1)
0000e9 93e0 0605 	STS  _PHASE_DOWN_B,R30
                 ; 0000 00C1         }
                 ; 0000 00C2         else if(PHASE_PHASE==3){
0000eb c07f      	RJMP _0x37
                 _0x36:
0000ec 91a0 0600 	LDS  R26,_PHASE_PHASE
0000ee 30a3      	CPI  R26,LOW(0x3)
0000ef f461      	BRNE _0x38
                 ; 0000 00C3         //PHASE_UP_A = 0;
                 ; 0000 00C4         PHASE_DOWN_A = 0;
0000f0 940e 0278 	CALL SUBOPT_0x2
                 ; 0000 00C5         PHASE_UP_B = 0;
0000f2 93e0 0602 	STS  _PHASE_UP_B,R30
                 ; 0000 00C6         //PHASE_DOWN_B = 0;
                 ; 0000 00C7         PHASE_UP_C = 0;
0000f4 940e 0283 	CALL SUBOPT_0x4
                 ; 0000 00C8         //PHASE_DOWN_C = 0;
                 ; 0000 00C9 
                 ; 0000 00CA         PHASE_UP_A = 1;
                 ; 0000 00CB         PHASE_DOWN_B = 1;
0000f6 93e0 0605 	STS  _PHASE_DOWN_B,R30
                 ; 0000 00CC         PHASE_DOWN_C = 1;
0000f8 e0e1      	LDI  R30,LOW(1)
0000f9 93e0 0606 	STS  _PHASE_DOWN_C,R30
                 ; 0000 00CD         }
                 ; 0000 00CE         else if(PHASE_PHASE==4){
0000fb c06f      	RJMP _0x39
                 _0x38:
0000fc 91a0 0600 	LDS  R26,_PHASE_PHASE
0000fe 30a4      	CPI  R26,LOW(0x4)
0000ff f461      	BRNE _0x3A
                 ; 0000 00CF         //PHASE_UP_A = 0;
                 ; 0000 00D0         PHASE_DOWN_A = 0;
000100 940e 0278 	CALL SUBOPT_0x2
                 ; 0000 00D1         PHASE_UP_B = 0;
000102 93e0 0602 	STS  _PHASE_UP_B,R30
                 ; 0000 00D2         PHASE_DOWN_B = 0;
000104 e0e0      	LDI  R30,LOW(0)
000105 93e0 0605 	STS  _PHASE_DOWN_B,R30
                 ; 0000 00D3         PHASE_UP_C = 0;
000107 940e 0283 	CALL SUBOPT_0x4
                 ; 0000 00D4         //PHASE_DOWN_C = 0;
                 ; 0000 00D5 
                 ; 0000 00D6         PHASE_UP_A = 1;
                 ; 0000 00D7         PHASE_DOWN_C = 1;
000109 93e0 0606 	STS  _PHASE_DOWN_C,R30
                 ; 0000 00D8         }
                 ; 0000 00D9         else if(PHASE_PHASE==5){
00010b c05f      	RJMP _0x3B
                 _0x3A:
00010c 91a0 0600 	LDS  R26,_PHASE_PHASE
00010e 30a5      	CPI  R26,LOW(0x5)
00010f f449      	BRNE _0x3C
                 ; 0000 00DA         //PHASE_UP_A = 0;
                 ; 0000 00DB         PHASE_DOWN_A = 0;
000110 940e 0278 	CALL SUBOPT_0x2
                 ; 0000 00DC         //PHASE_UP_B = 0;
                 ; 0000 00DD         PHASE_DOWN_B = 0;
000112 93e0 0605 	STS  _PHASE_DOWN_B,R30
                 ; 0000 00DE         PHASE_UP_C = 0;
000114 940e 0283 	CALL SUBOPT_0x4
                 ; 0000 00DF         //PHASE_DOWN_C = 0;
                 ; 0000 00E0 
                 ; 0000 00E1         PHASE_UP_A = 1;
                 ; 0000 00E2         PHASE_UP_B = 1;
000116 940e 028a 	CALL SUBOPT_0x5
                 ; 0000 00E3         PHASE_DOWN_C = 1;
                 ; 0000 00E4         }
                 ; 0000 00E5         else if(PHASE_PHASE==6){
000118 c052      	RJMP _0x3D
                 _0x3C:
000119 91a0 0600 	LDS  R26,_PHASE_PHASE
00011b 30a6      	CPI  R26,LOW(0x6)
00011c f439      	BRNE _0x3E
                 ; 0000 00E6         PHASE_UP_A = 0;
00011d 940e 026c 	CALL SUBOPT_0x0
                 ; 0000 00E7         PHASE_DOWN_A = 0;
                 ; 0000 00E8         //PHASE_UP_B = 0;
                 ; 0000 00E9         PHASE_DOWN_B = 0;
00011f 940e 0290 	CALL SUBOPT_0x6
                 ; 0000 00EA         PHASE_UP_C = 0;
                 ; 0000 00EB         //PHASE_DOWN_C = 0;
                 ; 0000 00EC 
                 ; 0000 00ED         PHASE_UP_B = 1;
000121 940e 028a 	CALL SUBOPT_0x5
                 ; 0000 00EE         PHASE_DOWN_C = 1;
                 ; 0000 00EF         }
                 ; 0000 00F0         else if(PHASE_PHASE==7){
000123 c047      	RJMP _0x3F
                 _0x3E:
000124 91a0 0600 	LDS  R26,_PHASE_PHASE
000126 30a7      	CPI  R26,LOW(0x7)
000127 f451      	BRNE _0x40
                 ; 0000 00F1         PHASE_UP_A = 0;
000128 940e 0297 	CALL SUBOPT_0x7
                 ; 0000 00F2         //PHASE_DOWN_A = 0;
                 ; 0000 00F3         //PHASE_UP_B = 0;
                 ; 0000 00F4         PHASE_DOWN_B = 0;
00012a 940e 0290 	CALL SUBOPT_0x6
                 ; 0000 00F5         PHASE_UP_C = 0;
                 ; 0000 00F6         //PHASE_DOWN_C = 0;
                 ; 0000 00F7 
                 ; 0000 00F8         PHASE_DOWN_A = 1;
00012c 93e0 0604 	STS  _PHASE_DOWN_A,R30
                 ; 0000 00F9         PHASE_UP_B = 1;
00012e e0e1      	LDI  R30,LOW(1)
00012f 940e 028a 	CALL SUBOPT_0x5
                 ; 0000 00FA         PHASE_DOWN_C = 1;
                 ; 0000 00FB         }
                 ; 0000 00FC         else if(PHASE_PHASE==8){
000131 c039      	RJMP _0x41
                 _0x40:
000132 91a0 0600 	LDS  R26,_PHASE_PHASE
000134 30a8      	CPI  R26,LOW(0x8)
000135 f461      	BRNE _0x42
                 ; 0000 00FD         PHASE_UP_A = 0;
000136 940e 0297 	CALL SUBOPT_0x7
                 ; 0000 00FE         //PHASE_DOWN_A = 0;
                 ; 0000 00FF         //PHASE_UP_B = 0;
                 ; 0000 0100         PHASE_DOWN_B = 0;
000138 93e0 0605 	STS  _PHASE_DOWN_B,R30
                 ; 0000 0101         PHASE_UP_C = 0;
00013a 940e 027c 	CALL SUBOPT_0x3
                 ; 0000 0102         PHASE_DOWN_C = 0;
                 ; 0000 0103 
                 ; 0000 0104         PHASE_DOWN_A = 1;
00013c 93e0 0604 	STS  _PHASE_DOWN_A,R30
                 ; 0000 0105         PHASE_UP_B = 1;
00013e e0e1      	LDI  R30,LOW(1)
00013f 93e0 0602 	STS  _PHASE_UP_B,R30
                 ; 0000 0106         }
                 ; 0000 0107         else if(PHASE_PHASE==9){
000141 c029      	RJMP _0x43
                 _0x42:
000142 91a0 0600 	LDS  R26,_PHASE_PHASE
000144 30a9      	CPI  R26,LOW(0x9)
000145 f441      	BRNE _0x44
                 ; 0000 0108         PHASE_UP_A = 0;
000146 940e 0297 	CALL SUBOPT_0x7
                 ; 0000 0109         //PHASE_DOWN_A = 0;
                 ; 0000 010A         //PHASE_UP_B = 0;
                 ; 0000 010B         PHASE_DOWN_B = 0;
000148 940e 029b 	CALL SUBOPT_0x8
                 ; 0000 010C         //PHASE_UP_C = 0;
                 ; 0000 010D         PHASE_DOWN_C = 0;
                 ; 0000 010E 
                 ; 0000 010F         PHASE_DOWN_A = 1;
                 ; 0000 0110         PHASE_UP_B = 1;
00014a e0e1      	LDI  R30,LOW(1)
00014b 93e0 0602 	STS  _PHASE_UP_B,R30
                 ; 0000 0111         PHASE_UP_C = 1;
00014d c01a      	RJMP _0x79
                 ; 0000 0112         }
                 ; 0000 0113         else if(PHASE_PHASE==10){
                 _0x44:
00014e 91a0 0600 	LDS  R26,_PHASE_PHASE
000150 30aa      	CPI  R26,LOW(0xA)
000151 f441      	BRNE _0x46
                 ; 0000 0114         PHASE_UP_A = 0;
000152 940e 0297 	CALL SUBOPT_0x7
                 ; 0000 0115         //PHASE_DOWN_A = 0;
                 ; 0000 0116         PHASE_UP_B = 0;
000154 93e0 0602 	STS  _PHASE_UP_B,R30
                 ; 0000 0117         PHASE_DOWN_B = 0;
000156 e0e0      	LDI  R30,LOW(0)
000157 940e 029b 	CALL SUBOPT_0x8
                 ; 0000 0118         //PHASE_UP_C = 0;
                 ; 0000 0119         PHASE_DOWN_C = 0;
                 ; 0000 011A 
                 ; 0000 011B         PHASE_DOWN_A = 1;
                 ; 0000 011C         PHASE_UP_C = 1;
000159 c00e      	RJMP _0x79
                 ; 0000 011D         }
                 ; 0000 011E         else if(PHASE_PHASE==11){
                 _0x46:
00015a 91a0 0600 	LDS  R26,_PHASE_PHASE
00015c 30ab      	CPI  R26,LOW(0xB)
00015d f469      	BRNE _0x48
                 ; 0000 011F         PHASE_UP_A = 0;
00015e 940e 0297 	CALL SUBOPT_0x7
                 ; 0000 0120         //PHASE_DOWN_A = 0;
                 ; 0000 0121         PHASE_UP_B = 0;
000160 940e 0272 	CALL SUBOPT_0x1
                 ; 0000 0122         //PHASE_DOWN_B = 0;
                 ; 0000 0123         //PHASE_UP_C = 0;
                 ; 0000 0124         PHASE_DOWN_C = 0;
                 ; 0000 0125 
                 ; 0000 0126         PHASE_DOWN_A = 1;
000162 e0e1      	LDI  R30,LOW(1)
000163 93e0 0604 	STS  _PHASE_DOWN_A,R30
                 ; 0000 0127         PHASE_DOWN_B = 1;
                 _0x78:
000165 e0e1      	LDI  R30,LOW(1)
000166 93e0 0605 	STS  _PHASE_DOWN_B,R30
                 ; 0000 0128         PHASE_UP_C = 1;
                 _0x79:
000168 e0e1      	LDI  R30,LOW(1)
000169 93e0 0603 	STS  _PHASE_UP_C,R30
                 ; 0000 0129         }
                 ; 0000 012A 
                 ; 0000 012B 
                 ; 0000 012C         if(PHASE_DOWN_A==1){
                 _0x48:
                 _0x43:
                 _0x41:
                 _0x3F:
                 _0x3D:
                 _0x3B:
                 _0x39:
                 _0x37:
00016b 91a0 0604 	LDS  R26,_PHASE_DOWN_A
00016d 30a1      	CPI  R26,LOW(0x1)
00016e f419      	BRNE _0x49
                 ; 0000 012D         PORTC.5 = 0;
00016f 9845      	CBI  0x8,5
                 ; 0000 012E         PORTC.4 = 1;
000170 9a44      	SBI  0x8,4
                 ; 0000 012F         }
                 ; 0000 0130         else{
000171 c001      	RJMP _0x4E
                 _0x49:
                 ; 0000 0131         PORTC.4 = 0;
000172 9844      	CBI  0x8,4
                 ; 0000 0132         }
                 _0x4E:
                 ; 0000 0133 
                 ; 0000 0134         if(PHASE_DOWN_B==1){
000173 91a0 0605 	LDS  R26,_PHASE_DOWN_B
000175 30a1      	CPI  R26,LOW(0x1)
000176 f419      	BRNE _0x51
                 ; 0000 0135         PORTC.3 = 0;
000177 9843      	CBI  0x8,3
                 ; 0000 0136         PORTC.2 = 1;
000178 9a42      	SBI  0x8,2
                 ; 0000 0137         }
                 ; 0000 0138         else{
000179 c001      	RJMP _0x56
                 _0x51:
                 ; 0000 0139         PORTC.2 = 0;
00017a 9842      	CBI  0x8,2
                 ; 0000 013A         }
                 _0x56:
                 ; 0000 013B 
                 ; 0000 013C         if(PHASE_DOWN_C==1){
00017b 91a0 0606 	LDS  R26,_PHASE_DOWN_C
00017d 30a1      	CPI  R26,LOW(0x1)
00017e f419      	BRNE _0x59
                 ; 0000 013D         PORTC.1 = 0;
00017f 9841      	CBI  0x8,1
                 ; 0000 013E         PORTC.0 = 1;
000180 9a40      	SBI  0x8,0
                 ; 0000 013F         }
                 ; 0000 0140         else{
000181 c001      	RJMP _0x5E
                 _0x59:
                 ; 0000 0141         PORTC.0 = 0;
000182 9840      	CBI  0x8,0
                 ; 0000 0142         }
                 _0x5E:
                 ; 0000 0143     }
                 ; 0000 0144 
                 ; 0000 0145 
                 ; 0000 0146 
                 ; 0000 0147 Count1++;
                 _0x30:
000183 01f3      	MOVW R30,R6
000184 9631      	ADIW R30,1
000185 013f      	MOVW R6,R30
                 ; 0000 0148     if(Count1>=10){
000186 e0ea      	LDI  R30,LOW(10)
000187 e0f0      	LDI  R31,HIGH(10)
000188 166e      	CP   R6,R30
000189 067f      	CPC  R7,R31
00018a f010      	BRLO _0x61
                 ; 0000 0149     Count1 = 0;
00018b 2466      	CLR  R6
00018c 2477      	CLR  R7
                 ; 0000 014A     }
                 ; 0000 014B 
                 ; 0000 014C     if(Count1<=5){
                 _0x61:
00018d e0e5      	LDI  R30,LOW(5)
00018e e0f0      	LDI  R31,HIGH(5)
00018f 15e6      	CP   R30,R6
000190 05f7      	CPC  R31,R7
000191 f080      	BRLO _0x62
                 ; 0000 014D         if(PHASE_UP_A==1){
000192 91a0 0601 	LDS  R26,_PHASE_UP_A
000194 30a1      	CPI  R26,LOW(0x1)
000195 f409      	BRNE _0x63
                 ; 0000 014E         PORTC.5 = 1;
000196 9a45      	SBI  0x8,5
                 ; 0000 014F         }
                 ; 0000 0150         if(PHASE_UP_B==1){
                 _0x63:
000197 91a0 0602 	LDS  R26,_PHASE_UP_B
000199 30a1      	CPI  R26,LOW(0x1)
00019a f409      	BRNE _0x66
                 ; 0000 0151         PORTC.3 = 1;
00019b 9a43      	SBI  0x8,3
                 ; 0000 0152         }
                 ; 0000 0153         if(PHASE_UP_C==1){
                 _0x66:
00019c 91a0 0603 	LDS  R26,_PHASE_UP_C
00019e 30a1      	CPI  R26,LOW(0x1)
00019f f409      	BRNE _0x69
                 ; 0000 0154         PORTC.1 = 1;
0001a0 9a41      	SBI  0x8,1
                 ; 0000 0155         }
                 ; 0000 0156     }
                 _0x69:
                 ; 0000 0157     else{
0001a1 c003      	RJMP _0x6C
                 _0x62:
                 ; 0000 0158     PORTC.5 = 0;
0001a2 9845      	CBI  0x8,5
                 ; 0000 0159     PORTC.3 = 0;
0001a3 9843      	CBI  0x8,3
                 ; 0000 015A     PORTC.1 = 0;
0001a4 9841      	CBI  0x8,1
                 ; 0000 015B     }
                 _0x6C:
                 ; 0000 015C 
                 ; 0000 015D 
                 ; 0000 015E 
                 ; 0000 015F /*
                 ; 0000 0160     if(PWM_PHASE>=PWM_LENGHT){
                 ; 0000 0161     PWM_PHASE = 0;
                 ; 0000 0162 
                 ; 0000 0163     CYCLE_PHASE++;
                 ; 0000 0164         if(CYCLE_PHASE>12){
                 ; 0000 0165         CYCLE_PHASE = 1;
                 ; 0000 0166         }
                 ; 0000 0167 
                 ; 0000 0168         if(CYCLE_PHASE==1){
                 ; 0000 0169 
                 ; 0000 016A         }
                 ; 0000 016B         else if(CYCLE_PHASE==2){
                 ; 0000 016C 
                 ; 0000 016D         }
                 ; 0000 016E         else if(CYCLE_PHASE==3){
                 ; 0000 016F 
                 ; 0000 0170         }
                 ; 0000 0171         else if(CYCLE_PHASE==4){
                 ; 0000 0172 
                 ; 0000 0173         }
                 ; 0000 0174         else if(CYCLE_PHASE==5){
                 ; 0000 0175 
                 ; 0000 0176         }
                 ; 0000 0177         else if(CYCLE_PHASE==6){
                 ; 0000 0178 
                 ; 0000 0179         }
                 ; 0000 017A         else if(CYCLE_PHASE==7){
                 ; 0000 017B 
                 ; 0000 017C         }
                 ; 0000 017D         else if(CYCLE_PHASE==8){
                 ; 0000 017E 
                 ; 0000 017F         }
                 ; 0000 0180         else if(CYCLE_PHASE==9){
                 ; 0000 0181 
                 ; 0000 0182         }
                 ; 0000 0183         else if(CYCLE_PHASE==10){
                 ; 0000 0184 
                 ; 0000 0185         }
                 ; 0000 0186         else if(CYCLE_PHASE==11){
                 ; 0000 0187 
                 ; 0000 0188         }
                 ; 0000 0189         else if(PHASE==12){
                 ; 0000 018A 
                 ; 0000 018B         }
                 ; 0000 018C     }
                 ; 0000 018D */
                 ; 0000 018E 
                 ; 0000 018F 
                 ; 0000 0190 }
0001a5 91e9      	LD   R30,Y+
0001a6 bfef      	OUT  SREG,R30
0001a7 91f9      	LD   R31,Y+
0001a8 91e9      	LD   R30,Y+
0001a9 91a9      	LD   R26,Y+
0001aa 9518      	RETI
                 ;
                 ;
                 ;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
                 ; 0000 0194 {
                 _timer2_ovf_isr:
                 ; 0000 0195 // Place your code here
                 ; 0000 0196 //Count2++;
                 ; 0000 0197 }
0001ab 9518      	RETI
                 ;
                 ;
                 ;
                 ;void main(void){
                 ; 0000 019B void main(void){
                 _main:
                 ; 0000 019C // Declare your local variables here
                 ; 0000 019D 
                 ; 0000 019E // Input/Output Ports initialization
                 ; 0000 019F // Port B initialization
                 ; 0000 01A0 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 01A1 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 01A2 PORTB=0x00;
0001ac e0e0      	LDI  R30,LOW(0)
0001ad b9e5      	OUT  0x5,R30
                 ; 0000 01A3 DDRB=0x00;
0001ae b9e4      	OUT  0x4,R30
                 ; 0000 01A4 
                 ; 0000 01A5 // Port C initialization
                 ; 0000 01A6 // Func6=In Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 01A7 // State6=T State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 01A8 PORTC=0x00;
0001af b9e8      	OUT  0x8,R30
                 ; 0000 01A9 DDRC=0x3F;
0001b0 e3ef      	LDI  R30,LOW(63)
0001b1 b9e7      	OUT  0x7,R30
                 ; 0000 01AA 
                 ; 0000 01AB // Port D initialization
                 ; 0000 01AC // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 01AD // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 01AE PORTD=0x00;
0001b2 e0e0      	LDI  R30,LOW(0)
0001b3 b9eb      	OUT  0xB,R30
                 ; 0000 01AF DDRD=0x00;
0001b4 b9ea      	OUT  0xA,R30
                 ; 0000 01B0 
                 ; 0000 01B1 // Timer/Counter 0 initialization
                 ; 0000 01B2 // Clock source: System Clock
                 ; 0000 01B3 // Clock value: Timer 0 Stopped
                 ; 0000 01B4 //TCCR0=0x00;
                 ; 0000 01B5 //TCNT0=0x00;
                 ; 0000 01B6 
                 ; 0000 01B7 // Timer/Counter 1 initialization
                 ; 0000 01B8 // Clock source: System Clock
                 ; 0000 01B9 // Clock value: 31.250 kHz
                 ; 0000 01BA // Mode: Fast PWM top=OCR1A
                 ; 0000 01BB // OC1A output: Discon.
                 ; 0000 01BC // OC1B output: Discon.
                 ; 0000 01BD // Noise Canceler: Off
                 ; 0000 01BE // Input Capture on Falling Edge
                 ; 0000 01BF // Timer1 Overflow Interrupt: On
                 ; 0000 01C0 // Input Capture Interrupt: Off
                 ; 0000 01C1 // Compare A Match Interrupt: Off
                 ; 0000 01C2 // Compare B Match Interrupt: Off
                 ; 0000 01C3 TCCR1A=0x03;
0001b5 e0e3      	LDI  R30,LOW(3)
0001b6 93e0 0080 	STS  128,R30
                 ; 0000 01C4 TCCR1B=0x1C;
0001b8 e1ec      	LDI  R30,LOW(28)
0001b9 93e0 0081 	STS  129,R30
                 ; 0000 01C5 TCNT1H=0x00;
0001bb e0e0      	LDI  R30,LOW(0)
0001bc 93e0 0085 	STS  133,R30
                 ; 0000 01C6 TCNT1L=0x00;
0001be 93e0 0084 	STS  132,R30
                 ; 0000 01C7 ICR1H=0x00;
0001c0 93e0 0087 	STS  135,R30
                 ; 0000 01C8 ICR1L=0x00;
0001c2 93e0 0086 	STS  134,R30
                 ; 0000 01C9 OCR1AH=0x00;
0001c4 93e0 0089 	STS  137,R30
                 ; 0000 01CA OCR1AL=0x00;
0001c6 93e0 0088 	STS  136,R30
                 ; 0000 01CB OCR1BH=0x00;
0001c8 93e0 008b 	STS  139,R30
                 ; 0000 01CC OCR1BL=0x00;
0001ca 93e0 008a 	STS  138,R30
                 ; 0000 01CD 
                 ; 0000 01CE // Timer/Counter 2 initialization
                 ; 0000 01CF // Clock source: System Clock
                 ; 0000 01D0 // Clock value: Timer2 Stopped
                 ; 0000 01D1 // Mode: Normal top=FFh
                 ; 0000 01D2 // OC2 output: Disconnected
                 ; 0000 01D3 //ASSR=0x00;
                 ; 0000 01D4 //TCCR2=0x00;
                 ; 0000 01D5 //TCNT2=0x00;
                 ; 0000 01D6 //OCR2=0x00;
                 ; 0000 01D7 
                 ; 0000 01D8 // External Interrupt(s) initialization
                 ; 0000 01D9 // INT0: Off
                 ; 0000 01DA // INT1: Off
                 ; 0000 01DB MCUCR=0x00;
0001cc bfe5      	OUT  0x35,R30
                 ; 0000 01DC 
                 ; 0000 01DD // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 01DE //TIMSK=0x04;
                 ; 0000 01DF 
                 ; 0000 01E0 // Analog Comparator initialization
                 ; 0000 01E1 // Analog Comparator: Off
                 ; 0000 01E2 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 01E3 ACSR=0x80;
0001cd e8e0      	LDI  R30,LOW(128)
0001ce bfe0      	OUT  0x30,R30
                 ; 0000 01E4 //SFIOR=0x00;
                 ; 0000 01E5 
                 ; 0000 01E6 // LCD module initialization
                 ; 0000 01E7 lcd_init(20);
0001cf e1e4      	LDI  R30,LOW(20)
0001d0 93ea      	ST   -Y,R30
0001d1 940e 023d 	CALL _lcd_init
                 ; 0000 01E8 
                 ; 0000 01E9 // Global enable interrupts
                 ; 0000 01EA #asm("sei")
0001d3 9478      	sei
                 ; 0000 01EB //OCR1A = 100;
                 ; 0000 01EC 
                 ; 0000 01ED     while(1){
                 _0x73:
                 ; 0000 01EE     unsigned int TIME;
                 ; 0000 01EF        // if(ONE_SECOND==1){
                 ; 0000 01F0 
                 ; 0000 01F1         //ONE_SECOND = 0;
                 ; 0000 01F2         /*
                 ; 0000 01F3         Phase++;
                 ; 0000 01F4             if(PHASE>12){
                 ; 0000 01F5             Phase = 1;
                 ; 0000 01F6             }
                 ; 0000 01F7 
                 ; 0000 01F8             if(PHASE==1){
                 ; 0000 01F9 
                 ; 0000 01FA             }
                 ; 0000 01FB             if(PHASE==1){
                 ; 0000 01FC 
                 ; 0000 01FD             }
                 ; 0000 01FE             if(PHASE==1){
                 ; 0000 01FF 
                 ; 0000 0200             }
                 ; 0000 0201             if(PHASE==1){
                 ; 0000 0202 
                 ; 0000 0203             }
                 ; 0000 0204             if(PHASE==1){
                 ; 0000 0205 
                 ; 0000 0206             }
                 ; 0000 0207             if(PHASE==1){
                 ; 0000 0208 
                 ; 0000 0209             }
                 ; 0000 020A             if(PHASE==1){
                 ; 0000 020B 
                 ; 0000 020C             }
                 ; 0000 020D             if(PHASE==1){
                 ; 0000 020E 
                 ; 0000 020F             }
                 ; 0000 0210             if(PHASE==1){
                 ; 0000 0211 
                 ; 0000 0212             }
                 ; 0000 0213             if(PHASE==1){
                 ; 0000 0214 
                 ; 0000 0215             }
                 ; 0000 0216             if(PHASE==1){
                 ; 0000 0217 
                 ; 0000 0218             }
                 ; 0000 0219             if(PHASE==1){
                 ; 0000 021A 
                 ; 0000 021B             }
                 ; 0000 021C             */
                 ; 0000 021D 
                 ; 0000 021E         //lcd_clear();
                 ; 0000 021F         //lcd_gotoxy(0,0);
                 ; 0000 0220         //lcd_put_number(0,5,0,0,Count0,0);
                 ; 0000 0221         //Count0 = 0;
                 ; 0000 0222 
                 ; 0000 0223         //lcd_gotoxy(0,1);
                 ; 0000 0224         //lcd_put_number(0,5,0,0,Count2,0);
                 ; 0000 0225         //Count2 = 0;
                 ; 0000 0226 
                 ; 0000 0227 
                 ; 0000 0228 
                 ; 0000 0229         //Count3++;
                 ; 0000 022A         //lcd_gotoxy(0,2);
                 ; 0000 022B         //lcd_put_number(0,7,0,0,Count3,0);
                 ; 0000 022C 
                 ; 0000 022D 
                 ; 0000 022E         // CPU USAGE ///////////////////////////////////////////////////////////////
                 ; 0000 022F         //Count3 = 0;
                 ; 0000 0230         //lcd_gotoxy(0,3);
                 ; 0000 0231 
                 ; 0000 0232         //lcd_puts("CPU COUNTS: ");
                 ; 0000 0233         //lcd_put_number(0,7,0,0,TIME,0);
                 ; 0000 0234         //TIME = Count3;
                 ; 0000 0235         ////////////////////////////////////////////////////////////////////////////
                 ; 0000 0236        // }
                 ; 0000 0237 
                 ; 0000 0238 
                 ; 0000 0239 
                 ; 0000 023A 
                 ; 0000 023B 
                 ; 0000 023C         //PORTC.0 = 0;// 250 ns
                 ; 0000 023D     //delay_ms(1000);
                 ; 0000 023E     }
0001d4 cfff      	RJMP _0x73
                 ; 0000 023F }
                 _0x76:
0001d5 cfff      	RJMP _0x76
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G100:
0001d6 e0ff          ldi   r31,15
                 __lcd_delay0:
0001d7 95fa          dec   r31
0001d8 f7f1          brne  __lcd_delay0
0001d9 9508      	RET
                 __lcd_ready:
0001da b3a1          in    r26,__lcd_direction
0001db 70af          andi  r26,0xf                 ;set as input
0001dc bba1          out   __lcd_direction,r26
0001dd 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
0001de 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
0001df dff6      	RCALL __lcd_delay_G100
0001e0 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
0001e1 dff4      	RCALL __lcd_delay_G100
0001e2 b3a0          in    r26,__lcd_pin
0001e3 9892          cbi   __lcd_port,__lcd_enable ;EN=0
0001e4 dff1      	RCALL __lcd_delay_G100
0001e5 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
0001e6 dfef      	RCALL __lcd_delay_G100
0001e7 9892          cbi   __lcd_port,__lcd_enable ;EN=0
0001e8 fda7          sbrc  r26,__lcd_busy_flag
0001e9 cff5          rjmp  __lcd_busy
0001ea 9508      	RET
                 __lcd_write_nibble_G100:
0001eb 7fa0          andi  r26,0xf0
0001ec 2bab          or    r26,r27
0001ed bba2          out   __lcd_port,r26          ;write
0001ee 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
0001ef 940e 01d6 	CALL __lcd_delay_G100
0001f1 9892          cbi   __lcd_port,__lcd_enable ;EN=0
0001f2 940e 01d6 	CALL __lcd_delay_G100
0001f4 9508      	RET
                 __lcd_write_data:
0001f5 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0001f6 b3a1          in    r26,__lcd_direction
0001f7 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
0001f8 bba1          out   __lcd_direction,r26
0001f9 b3b2          in    r27,__lcd_port
0001fa 70bf          andi  r27,0xf
0001fb 81a8          ld    r26,y
0001fc dfee      	RCALL __lcd_write_nibble_G100
0001fd 81a8          ld    r26,y
0001fe 95a2          swap  r26
0001ff dfeb      	RCALL __lcd_write_nibble_G100
000200 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
000201 940c 026a 	JMP  _0x2020001
                 __lcd_read_nibble_G100:
000203 9a92          sbi   __lcd_port,__lcd_enable ;EN=1
000204 940e 01d6 	CALL __lcd_delay_G100
000206 b3e0          in    r30,__lcd_pin           ;read
000207 9892          cbi   __lcd_port,__lcd_enable ;EN=0
000208 940e 01d6 	CALL __lcd_delay_G100
00020a 7fe0          andi  r30,0xf0
00020b 9508      	RET
                 _lcd_read_byte0_G100:
00020c 940e 01d6 	CALL __lcd_delay_G100
00020e dff4      	RCALL __lcd_read_nibble_G100
00020f 2fae          mov   r26,r30
000210 dff2      	RCALL __lcd_read_nibble_G100
000211 9891          cbi   __lcd_port,__lcd_rd     ;RD=0
000212 95e2          swap  r30
000213 2bea          or    r30,r26
000214 9508      	RET
                 _lcd_clear:
000215 940e 01da 	CALL __lcd_ready
000217 e0e2      	LDI  R30,LOW(2)
000218 93ea      	ST   -Y,R30
000219 940e 01f5 	CALL __lcd_write_data
00021b 940e 01da 	CALL __lcd_ready
00021d e0ec      	LDI  R30,LOW(12)
00021e 93ea      	ST   -Y,R30
00021f 940e 01f5 	CALL __lcd_write_data
000221 940e 01da 	CALL __lcd_ready
000223 e0e1      	LDI  R30,LOW(1)
000224 93ea      	ST   -Y,R30
000225 940e 01f5 	CALL __lcd_write_data
000227 e0e0      	LDI  R30,LOW(0)
000228 93e0 060c 	STS  __lcd_y,R30
00022a 93e0 060b 	STS  __lcd_x,R30
00022c 9508      	RET
                 __long_delay_G100:
00022d 27aa          clr   r26
00022e 27bb          clr   r27
                 __long_delay0:
00022f 9711          sbiw  r26,1         ;2 cycles
000230 f7f1          brne  __long_delay0 ;2 cycles
000231 9508      	RET
                 __lcd_init_write_G100:
000232 9891          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000233 b3a1          in    r26,__lcd_direction
000234 6fa7          ori   r26,0xf7                ;set as output
000235 bba1          out   __lcd_direction,r26
000236 b3b2          in    r27,__lcd_port
000237 70bf          andi  r27,0xf
000238 81a8          ld    r26,y
000239 940e 01eb 	CALL __lcd_write_nibble_G100
00023b 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
00023c c02d      	RJMP _0x2020001
                 _lcd_init:
00023d 9892          cbi   __lcd_port,__lcd_enable ;EN=0
00023e 9890          cbi   __lcd_port,__lcd_rs     ;RS=0
00023f 81e8      	LD   R30,Y
000240 93e0 060d 	STS  __lcd_maxx,R30
000242 58e0      	SUBI R30,-LOW(128)
                +
000243 93e0 0609+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000245 81e8      	LD   R30,Y
000246 54e0      	SUBI R30,-LOW(192)
                +
000247 93e0 060a+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000249 d05a      	RCALL SUBOPT_0x9
00024a d059      	RCALL SUBOPT_0x9
00024b d058      	RCALL SUBOPT_0x9
00024c dfe0      	RCALL __long_delay_G100
00024d e2e0      	LDI  R30,LOW(32)
00024e 93ea      	ST   -Y,R30
00024f dfe2      	RCALL __lcd_init_write_G100
000250 dfdc      	RCALL __long_delay_G100
000251 e2e8      	LDI  R30,LOW(40)
000252 d056      	RCALL SUBOPT_0xA
000253 e0e4      	LDI  R30,LOW(4)
000254 d054      	RCALL SUBOPT_0xA
000255 e8e5      	LDI  R30,LOW(133)
000256 d052      	RCALL SUBOPT_0xA
000257 b3a1          in    r26,__lcd_direction
000258 70af          andi  r26,0xf                 ;set as input
000259 bba1          out   __lcd_direction,r26
00025a 9a91          sbi   __lcd_port,__lcd_rd     ;RD=1
00025b 940e 020c 	CALL _lcd_read_byte0_G100
00025d 30e5      	CPI  R30,LOW(0x5)
00025e f011      	BREQ _0x200000B
00025f e0e0      	LDI  R30,LOW(0)
000260 c009      	RJMP _0x2020001
                 _0x200000B:
000261 940e 01da 	CALL __lcd_ready
000263 e0e6      	LDI  R30,LOW(6)
000264 93ea      	ST   -Y,R30
000265 940e 01f5 	CALL __lcd_write_data
000267 940e 0215 	CALL _lcd_clear
000269 e0e1      	LDI  R30,LOW(1)
                 _0x2020001:
00026a 9621      	ADIW R28,1
00026b 9508      	RET
                 
                 	.DSEG
                 _PHASE_PHASE:
000600           	.BYTE 0x1
                 _PHASE_UP_A:
000601           	.BYTE 0x1
                 _PHASE_UP_B:
000602           	.BYTE 0x1
                 _PHASE_UP_C:
000603           	.BYTE 0x1
                 _PHASE_DOWN_A:
000604           	.BYTE 0x1
                 _PHASE_DOWN_B:
000605           	.BYTE 0x1
                 _PHASE_DOWN_C:
000606           	.BYTE 0x1
                 __base_y_G100:
000607           	.BYTE 0x4
                 __lcd_x:
00060b           	.BYTE 0x1
                 __lcd_y:
00060c           	.BYTE 0x1
                 __lcd_maxx:
00060d           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
00026c e0e0      	LDI  R30,LOW(0)
00026d 93e0 0601 	STS  _PHASE_UP_A,R30
00026f 93e0 0604 	STS  _PHASE_DOWN_A,R30
000271 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
000272 93e0 0602 	STS  _PHASE_UP_B,R30
000274 e0e0      	LDI  R30,LOW(0)
000275 93e0 0606 	STS  _PHASE_DOWN_C,R30
000277 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000278 e0e0      	LDI  R30,LOW(0)
000279 93e0 0604 	STS  _PHASE_DOWN_A,R30
00027b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
00027c e0e0      	LDI  R30,LOW(0)
00027d 93e0 0603 	STS  _PHASE_UP_C,R30
00027f 93e0 0606 	STS  _PHASE_DOWN_C,R30
000281 e0e1      	LDI  R30,LOW(1)
000282 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
000283 e0e0      	LDI  R30,LOW(0)
000284 93e0 0603 	STS  _PHASE_UP_C,R30
000286 e0e1      	LDI  R30,LOW(1)
000287 93e0 0601 	STS  _PHASE_UP_A,R30
000289 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
00028a 93e0 0602 	STS  _PHASE_UP_B,R30
00028c e0e1      	LDI  R30,LOW(1)
00028d 93e0 0606 	STS  _PHASE_DOWN_C,R30
00028f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000290 93e0 0605 	STS  _PHASE_DOWN_B,R30
000292 e0e0      	LDI  R30,LOW(0)
000293 93e0 0603 	STS  _PHASE_UP_C,R30
000295 e0e1      	LDI  R30,LOW(1)
000296 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
000297 e0e0      	LDI  R30,LOW(0)
000298 93e0 0601 	STS  _PHASE_UP_A,R30
00029a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
00029b 93e0 0605 	STS  _PHASE_DOWN_B,R30
00029d e0e0      	LDI  R30,LOW(0)
00029e 93e0 0606 	STS  _PHASE_DOWN_C,R30
0002a0 e0e1      	LDI  R30,LOW(1)
0002a1 93e0 0604 	STS  _PHASE_DOWN_A,R30
0002a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9:
0002a4 940e 022d 	CALL __long_delay_G100
0002a6 e3e0      	LDI  R30,LOW(48)
0002a7 93ea      	ST   -Y,R30
0002a8 cf89      	RJMP __lcd_init_write_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
0002a9 93ea      	ST   -Y,R30
0002aa 940e 01f5 	CALL __lcd_write_data
0002ac 940c 022d 	JMP  __long_delay_G100
                 
                 
                 	.CSEG
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega2561 register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   2 r6 :   5 r7 :   3 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   2 r26:  69 r27:   9 r28:   2 r29:   1 r30: 165 r31:  15 
x  :   3 y  :  21 z  :   7 
Registers used: 18 out of 35 (51.4%)

ATmega2561 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   3 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 
brlt  :   0 brmi  :   0 brne  :  23 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  46 
cbi   :  19 cbr   :   1 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   8 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   3 cpc   :   3 cpi   :  20 cpse  :   0 dec   :   2 des   :   0 
eicall:   0 eijmp :   0 elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :  10 inc   :   0 jmp   :  55 
ld    :   9 ldd   :   0 ldi   :  67 lds   :  20 lpm   :   7 lsl   :   0 
lsr   :   0 mov   :   1 movw  :   7 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   2 ori   :   2 out   :  23 pop   :   0 
push  :   0 rcall :  17 ret   :  17 reti  :   3 rjmp  :  22 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :  14 sbic  :   0 sbis  :   0 
sbiw  :   4 sbr   :   0 sbrc  :   1 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  15 std   :   0 sts   :  58 
sub   :   0 subi  :   3 swap  :   2 tst   :   0 wdr   :   1 
Instructions used: 39 out of 119 (32.8%)

ATmega2561 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00055c   1362     10   1372  262144   0.5%
[.dseg] 0x000200 0x00060e      0     14     14    8192   0.2%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 7 warnings
